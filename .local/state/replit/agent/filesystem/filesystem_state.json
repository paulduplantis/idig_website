{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\niDIG is a React-based web application focused on providing \"resonant tools for curious minds.\" The platform features a content-rich website with an online book, contact functionality, and newsletter subscription system. Built as a modern full-stack application, it combines a React frontend with an Express.js backend and uses PostgreSQL for data persistence through Drizzle ORM.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Library**: Comprehensive shadcn/ui component system built on Radix UI primitives\n- **Styling**: Tailwind CSS with CSS custom properties for theming support\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation through @hookform/resolvers\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript running on Node.js\n- **API Design**: RESTful API endpoints for newsletter subscriptions and contact form submissions\n- **Error Handling**: Centralized error handling middleware with structured error responses\n- **Request Logging**: Custom middleware for API request logging and performance monitoring\n- **Storage Abstraction**: Interface-based storage pattern supporting both in-memory and database implementations\n\n## Data Storage\n- **Database**: PostgreSQL configured through Neon Database serverless connection\n- **ORM**: Drizzle ORM with schema-first approach and automatic TypeScript type generation\n- **Schema Validation**: Drizzle-Zod integration for runtime validation matching database schema\n- **Migrations**: Drizzle Kit for database schema migrations and management\n\n## Development Environment\n- **Build System**: Vite with React plugin and development-specific tooling\n- **Development Server**: Express server with Vite middleware integration for hot module replacement\n- **Static Assets**: Vite handles static asset serving and optimization\n- **Path Aliases**: Configured path mapping for clean imports across client, server, and shared code\n\n## Project Structure\n- **Monorepo Layout**: Single repository with separate client, server, and shared directories\n- **Shared Code**: Common schemas and types shared between frontend and backend\n- **Component Organization**: UI components separated into reusable primitives and application-specific components\n- **Type Safety**: Full TypeScript coverage with strict configuration across all packages\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Drizzle ORM**: Type-safe database operations with automatic schema synchronization\n\n## UI and Design\n- **Radix UI**: Accessible component primitives for complex UI elements\n- **Tailwind CSS**: Utility-first CSS framework with custom theme configuration\n- **Lucide React**: Icon library providing consistent iconography\n\n## Development Tools\n- **TanStack Query**: Server state management with caching and synchronization\n- **React Hook Form**: Form state management with validation integration\n- **Zod**: Runtime type validation and schema definition\n- **Wouter**: Minimal routing solution for single-page application navigation\n\n## Build and Development\n- **Vite**: Modern build tool with fast HMR and optimized production builds\n- **TypeScript**: Static type checking across the entire application\n- **ESBuild**: Fast JavaScript bundling for server-side code compilation","size_bytes":3601},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // Serve attached assets statically\n  app.use('/attached_assets', express.static('attached_assets'));\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2171},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      \n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `public, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":6460},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertNewsletterSchema, insertBlogSubscriptionSchema, insertContactSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport * as path from \"path\";\nimport {\n  ObjectStorageService,\n  ObjectNotFoundError,\n} from \"./objectStorage\";\n\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Newsletter subscription endpoint\n  app.post(\"/api/newsletter\", async (req, res) => {\n    try {\n      const data = insertNewsletterSchema.parse(req.body);\n      \n      // Check if email already exists\n      const existing = await storage.getNewsletterByEmail(data.email);\n      if (existing) {\n        return res.status(400).json({ message: \"Email already subscribed\" });\n      }\n      \n      const newsletter = await storage.createNewsletterSubscription(data);\n      res.json({ message: \"Successfully subscribed to newsletter\", newsletter });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid email format\" });\n      }\n      res.status(500).json({ message: \"Failed to subscribe to newsletter\" });\n    }\n  });\n\n  // Blog subscription endpoint\n  app.post(\"/api/blog-subscription\", async (req, res) => {\n    try {\n      const data = insertBlogSubscriptionSchema.parse(req.body);\n      \n      // Check if email already exists\n      const existing = await storage.getBlogSubscriptionByEmail(data.email);\n      if (existing) {\n        return res.status(400).json({ message: \"Email already subscribed to blog updates\" });\n      }\n      \n      const blogSubscription = await storage.createBlogSubscription(data);\n      res.json({ message: \"Successfully subscribed to blog updates\", blogSubscription });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid email format\" });\n      }\n      res.status(500).json({ message: \"Failed to subscribe to blog updates\" });\n    }\n  });\n\n  // Contact form endpoint\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const data = insertContactSchema.parse(req.body);\n      const contact = await storage.createContact(data);\n      res.json({ message: \"Message sent successfully\", contact });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Please fill in all required fields\" });\n      }\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // Get all contacts (for admin purposes)\n  app.get(\"/api/contacts\", async (req, res) => {\n    try {\n      const contacts = await storage.getContacts();\n      res.json(contacts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to retrieve contacts\" });\n    }\n  });\n\n  // Admin endpoints for subscriber lists\n  app.get(\"/api/admin/newsletter-subscribers\", async (req, res) => {\n    try {\n      const subscribers = await storage.getAllNewsletterSubscribers();\n      res.json(subscribers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to retrieve newsletter subscribers\" });\n    }\n  });\n\n  app.get(\"/api/admin/blog-subscribers\", async (req, res) => {\n    try {\n      const subscribers = await storage.getAllBlogSubscribers();\n      res.json(subscribers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to retrieve blog subscribers\" });\n    }\n  });\n\n  // Serve email templates\n  app.get(\"/email-templates/:templateName\", (req, res) => {\n    const { templateName } = req.params;\n    const allowedTemplates = [\n      'monthly-newsletter-template.html',\n      'blog-notification-template.html'\n    ];\n    \n    if (!allowedTemplates.includes(templateName)) {\n      return res.status(404).send('Template not found');\n    }\n    \n    res.sendFile(path.join(process.cwd(), 'email-templates', templateName));\n  });\n\n  // Object storage endpoints for video serving\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(\n        req.path,\n      );\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error accessing object:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  // Direct bucket file access for files in bucket root\n  app.get(\"/bucket-files/:fileName(*)\", async (req, res) => {\n    const bucketId = process.env.DEFAULT_OBJECT_STORAGE_BUCKET_ID;\n    if (!bucketId) {\n      return res.status(500).json({ error: \"Bucket not configured\" });\n    }\n    \n    try {\n      const { objectStorageClient } = await import(\"./objectStorage\");\n      const bucket = objectStorageClient.bucket(bucketId);\n      const file = bucket.file(req.params.fileName);\n      \n      const [exists] = await file.exists();\n      if (!exists) {\n        return res.sendStatus(404);\n      }\n      \n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      \n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": \"public, max-age=3600\",\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error accessing bucket file:\", error);\n      return res.sendStatus(500);\n    }\n  });\n\n  // Upload URL endpoint for video uploads\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":6338},"server/storage.ts":{"content":"import { type Newsletter, type InsertNewsletter, type BlogSubscription, type InsertBlogSubscription, type Contact, type InsertContact } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Newsletter methods\n  createNewsletterSubscription(newsletter: InsertNewsletter): Promise<Newsletter>;\n  getNewsletterByEmail(email: string): Promise<Newsletter | undefined>;\n  \n  // Blog subscription methods\n  createBlogSubscription(blogSubscription: InsertBlogSubscription): Promise<BlogSubscription>;\n  getBlogSubscriptionByEmail(email: string): Promise<BlogSubscription | undefined>;\n  \n  // Contact methods\n  createContact(contact: InsertContact): Promise<Contact>;\n  getContacts(): Promise<Contact[]>;\n  \n  // Admin methods\n  getAllNewsletterSubscribers(): Promise<Newsletter[]>;\n  getAllBlogSubscribers(): Promise<BlogSubscription[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private newsletters: Map<string, Newsletter>;\n  private blogSubscriptions: Map<string, BlogSubscription>;\n  private contacts: Map<string, Contact>;\n\n  constructor() {\n    this.newsletters = new Map();\n    this.blogSubscriptions = new Map();\n    this.contacts = new Map();\n  }\n\n  async createNewsletterSubscription(insertNewsletter: InsertNewsletter): Promise<Newsletter> {\n    const id = randomUUID();\n    const newsletter: Newsletter = { \n      ...insertNewsletter, \n      id,\n      createdAt: new Date()\n    };\n    this.newsletters.set(id, newsletter);\n    return newsletter;\n  }\n\n  async getNewsletterByEmail(email: string): Promise<Newsletter | undefined> {\n    return Array.from(this.newsletters.values()).find(\n      (newsletter) => newsletter.email === email,\n    );\n  }\n\n  async createBlogSubscription(insertBlogSubscription: InsertBlogSubscription): Promise<BlogSubscription> {\n    const id = randomUUID();\n    const blogSubscription: BlogSubscription = { \n      ...insertBlogSubscription, \n      id,\n      createdAt: new Date()\n    };\n    this.blogSubscriptions.set(id, blogSubscription);\n    return blogSubscription;\n  }\n\n  async getBlogSubscriptionByEmail(email: string): Promise<BlogSubscription | undefined> {\n    return Array.from(this.blogSubscriptions.values()).find(\n      (subscription) => subscription.email === email,\n    );\n  }\n\n  async createContact(insertContact: InsertContact): Promise<Contact> {\n    const id = randomUUID();\n    const contact: Contact = { \n      ...insertContact, \n      id,\n      createdAt: new Date()\n    };\n    this.contacts.set(id, contact);\n    return contact;\n  }\n\n  async getContacts(): Promise<Contact[]> {\n    return Array.from(this.contacts.values());\n  }\n\n  async getAllNewsletterSubscribers(): Promise<Newsletter[]> {\n    return Array.from(this.newsletters.values());\n  }\n\n  async getAllBlogSubscribers(): Promise<BlogSubscription[]> {\n    return Array.from(this.blogSubscriptions.values());\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":2918},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const newsletters = pgTable(\"newsletters\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const blogSubscriptions = pgTable(\"blog_subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const contacts = pgTable(\"contacts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  subject: text(\"subject\").notNull(),\n  message: text(\"message\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const presentations = pgTable(\"presentations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  description: text(\"description\"),\n  isPublic: boolean(\"is_public\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const presentationSlides = pgTable(\"presentation_slides\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  presentationId: varchar(\"presentation_id\").references(() => presentations.id, { onDelete: \"cascade\" }).notNull(),\n  type: text(\"type\").notNull(), // 'intro', 'video', 'callout'\n  title: text(\"title\"),\n  content: text(\"content\"),\n  videoUrl: text(\"video_url\"),\n  duration: integer(\"duration\"), // duration in seconds for callouts\n  order: integer(\"order\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertNewsletterSchema = createInsertSchema(newsletters).pick({\n  email: true,\n});\n\nexport const insertBlogSubscriptionSchema = createInsertSchema(blogSubscriptions).pick({\n  email: true,\n});\n\nexport const insertContactSchema = createInsertSchema(contacts).pick({\n  name: true,\n  email: true,\n  subject: true,\n  message: true,\n});\n\nexport const insertPresentationSchema = createInsertSchema(presentations).pick({\n  title: true,\n  slug: true,\n  description: true,\n  isPublic: true,\n});\n\nexport const insertPresentationSlideSchema = createInsertSchema(presentationSlides).pick({\n  presentationId: true,\n  type: true,\n  title: true,\n  content: true,\n  videoUrl: true,\n  duration: true,\n  order: true,\n});\n\nexport type InsertNewsletter = z.infer<typeof insertNewsletterSchema>;\nexport type Newsletter = typeof newsletters.$inferSelect;\nexport type InsertBlogSubscription = z.infer<typeof insertBlogSubscriptionSchema>;\nexport type BlogSubscription = typeof blogSubscriptions.$inferSelect;\nexport type InsertContact = z.infer<typeof insertContactSchema>;\nexport type Contact = typeof contacts.$inferSelect;\nexport type InsertPresentation = z.infer<typeof insertPresentationSchema>;\nexport type Presentation = typeof presentations.$inferSelect;\nexport type InsertPresentationSlide = z.infer<typeof insertPresentationSlideSchema>;\nexport type PresentationSlide = typeof presentationSlides.$inferSelect;\n","size_bytes":3383},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/Home\";\nimport About from \"@/pages/About\";\nimport Newsletter from \"@/pages/Newsletter\";\nimport MonthlySubscription from \"@/pages/MonthlySubscription\";\nimport BlogSubscription from \"@/pages/BlogSubscription\";\nimport Blog from \"@/pages/Blog\";\nimport Book from \"@/pages/Book\";\nimport Contact from \"@/pages/Contact\";\nimport Chapter from \"@/pages/Chapter\";\nimport Demo from \"@/pages/Demo\";\nimport BlogPost from \"@/pages/BlogPost\";\nimport NewsletterIssue from \"@/pages/NewsletterIssue\";\nimport Admin from \"@/pages/Admin\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/newsletter\" component={Newsletter} />\n      <Route path=\"/newsletter/:issueId\" component={NewsletterIssue} />\n      <Route path=\"/monthly-subscription\" component={MonthlySubscription} />\n      <Route path=\"/blog-subscription\" component={BlogSubscription} />\n      <Route path=\"/blog/:id\" component={BlogPost} />\n      <Route path=\"/blog\" component={Blog} />\n      <Route path=\"/book\" component={Book} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route path=\"/book/chapter/:chapterNumber\" component={Chapter} />\n      <Route path=\"/demo/:slug\" component={Demo} />\n      <Route path=\"/demo\" component={Demo} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1949},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(0, 0%, 20%);\n  --muted: hsl(210, 40%, 98%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(0, 0%, 20%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(0, 0%, 20%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(210, 40%, 98%);\n  --secondary-foreground: hsl(222, 84%, 5%);\n  --accent: hsl(210, 40%, 98%);\n  --accent-foreground: hsl(222, 84%, 5%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(60, 9%, 98%);\n  --ring: hsl(207, 90%, 54%);\n  --radius: 0.75rem;\n  --charcoal: hsl(0, 0%, 18%);\n  --apple-blue: hsl(207, 90%, 54%);\n  --light-gray: hsl(210, 20%, 97%);\n  --border-gray: hsl(214, 20%, 90%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 4%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 4%, 16%);\n  --muted-foreground: hsl(240, 5%, 65%);\n  --popover: hsl(240, 10%, 4%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 4%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 4%, 16%);\n  --input: hsl(240, 4%, 16%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 4%, 16%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 4%, 16%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(207, 90%, 54%);\n  --radius: 0.75rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;\n  }\n  \n  .logo-font {\n    font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Helvetica Neue', 'Avenir Next', Avenir, 'Segoe UI', Roboto, sans-serif;\n    font-weight: 300;\n  }\n\n  .apple-blue {\n    color: hsl(207, 90%, 54%);\n  }\n\n  .charcoal {\n    color: hsl(0, 0%, 20%);\n  }\n\n\n\n  .light-gray-bg {\n    background-color: hsl(210, 20%, 97%);\n  }\n\n  .slide-fade-enter {\n    opacity: 0;\n    transform: translateX(30px);\n  }\n\n  .slide-fade-enter-active {\n    opacity: 1;\n    transform: translateX(0);\n    transition: opacity 300ms, transform 300ms;\n  }\n\n  .slide-fade-exit {\n    opacity: 1;\n    transform: translateX(0);\n  }\n\n  .slide-fade-exit-active {\n    opacity: 0;\n    transform: translateX(-30px);\n    transition: opacity 300ms, transform 300ms;\n  }\n}\n\n/* Custom scroll behavior */\nhtml {\n  scroll-behavior: smooth;\n}\n\n/* Apple-style button hover effects */\n.apple-button {\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.apple-button:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(0, 122, 255, 0.15);\n}\n\n/* Logo spacing */\n.logo-i {\n  font-style: italic;\n  margin-right: 0.35rem;\n  font-family: 'Helvetica Neue', 'Avenir Next', Avenir, 'SF Pro Display', -apple-system, BlinkMacSystemFont, sans-serif;\n  font-weight: 300;\n  color: hsl(0, 0%, 18%);\n}\n\n.logo-dig {\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n  font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Helvetica Neue', 'Avenir Next', Avenir, sans-serif;\n  font-weight: 400;\n  color: hsl(0, 0%, 18%);\n}\n\n.logo-io {\n  color: hsl(207, 90%, 54%);\n  font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Helvetica Neue', 'Avenir Next', Avenir, sans-serif;\n  font-weight: 300;\n}\n\n/* Horizontal scroll styling */\n.scrollbar-hide {\n  -ms-overflow-style: none;  /* Internet Explorer 10+ */\n  scrollbar-width: none;  /* Firefox */\n}\n\n.scrollbar-hide::-webkit-scrollbar {\n  display: none;  /* Safari and Chrome */\n}\n\n.line-clamp-2 {\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n","size_bytes":3919},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/Navigation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Menu, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Navigation() {\n  const [location] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  useEffect(() => {\n    setIsMobileMenuOpen(false);\n  }, [location]);\n\n  const navLinks = [\n    { href: \"/\", label: \"Home\" },\n    { href: \"/about\", label: \"About\" },\n    { href: \"/newsletter\", label: \"The Resonant Builders Monthly\" },\n    { href: \"/blog\", label: \"The Resonant Builders Blog\" },\n    { href: \"/book\", label: \"We the Resonant Builders\" },\n    { href: \"/contact\", label: \"Contact\" },\n  ];\n\n  const isActive = (href: string) => {\n    if (href === \"/\" && location === \"/\") return true;\n    if (href !== \"/\" && location.startsWith(href)) return true;\n    return false;\n  };\n\n  return (\n    <nav className=\"bg-white border-b border-gray-200 relative\">\n      <div className=\"max-w-6xl mx-auto px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center\">\n            <span className=\"text-2xl font-medium\">\ni<em>DIG</em>\n              <span className=\"logo-io\">.io</span>\n            </span>\n          </Link>\n\n          {/* Centered Tagline */}\n          <div className=\"absolute left-1/2 transform -translate-x-1/2\">\n            <span className=\"text-lg font-medium\">\n              <span className=\"apple-blue\">Resonant</span>\n              <span className=\"charcoal\"> Tools for </span>\n              <span className=\"apple-blue\">Curious</span>\n              <span className=\"charcoal\"> Minds</span>\n            </span>\n          </div>\n\n          <div className=\"flex items-center gap-4\">\n            {/* Subscribe Button */}\n            <Link href=\"/newsletter\">\n              <Button className=\"apple-button px-4 py-2 text-sm font-medium\" data-testid=\"button-subscribe\">\n                Subscribe\n              </Button>\n            </Link>\n            \n            {/* Hamburger Menu Button */}\n            <button \n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              className=\"p-2\"\n              data-testid=\"button-menu-toggle\"\n            >\n              {isMobileMenuOpen ? (\n                <X className=\"w-6 h-6\" />\n              ) : (\n                <Menu className=\"w-6 h-6\" />\n              )}\n            </button>\n          </div>\n        </div>\n\n        {/* Dropdown Navigation */}\n        {isMobileMenuOpen && (\n          <div className=\"absolute top-full right-6 mt-2 w-80 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50\">\n            <div className=\"flex flex-col\">\n              {navLinks.map((link) => (\n                <Link \n                  key={link.href}\n                  href={link.href} \n                  className={`px-4 py-3 transition-colors duration-200 hover:bg-gray-50 ${\n                    isActive(link.href) \n                      ? \"text-blue-500 bg-blue-50\" \n                      : \"text-gray-700 hover:text-blue-500\"\n                  }`}\n                >\n                  {link.label}\n                </Link>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":3322},"client/src/components/NewsletterSignup.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Link } from \"wouter\";\n\nexport default function NewsletterSignup() {\n  const [email, setEmail] = useState(\"\");\n  const { toast } = useToast();\n\n  const newsletterMutation = useMutation({\n    mutationFn: async (email: string) => {\n      return apiRequest(\"POST\", \"/api/newsletter\", { email });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success!\",\n        description: \"You've been subscribed to The Resonant Builders Monthly.\",\n      });\n      setEmail(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Subscription failed\",\n        description: error.message || \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!email.trim()) return;\n    newsletterMutation.mutate(email.trim());\n  };\n\n  return (\n    <div className=\"bg-white rounded-2xl p-8 shadow-lg border border-gray-200 text-center\">\n      <h3 className=\"text-4xl md:text-5xl font-light mb-4\">The Resonant Builders Monthly</h3>\n      <p className=\"text-gray-600 mb-4\">\n        Join our newsletter for insights on building tools for curious minds.\n      </p>\n      \n      <div className=\"mb-6\">\n        <Link href=\"/newsletter\" className=\"inline-flex items-center text-blue-500 hover:text-blue-600 transition-colors font-medium\" data-testid=\"link-explore-newsletter\">\n          Explore Newsletter\n          <svg className=\"w-4 h-4 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n          </svg>\n        </Link>\n      </div>\n      \n      <form onSubmit={handleSubmit} className=\"max-w-md mx-auto flex gap-3\">\n        <Input \n          type=\"email\" \n          placeholder=\"Enter your email\" \n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          className=\"flex-1\"\n          required\n          disabled={newsletterMutation.isPending}\n        />\n        <Button \n          type=\"submit\" \n          className=\"apple-button px-6\"\n          disabled={newsletterMutation.isPending}\n        >\n          {newsletterMutation.isPending ? \"Subscribing...\" : \"Subscribe\"}\n        </Button>\n      </form>\n    </div>\n  );\n}\n","size_bytes":2549},"client/src/components/SlidePresentation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\n\ninterface Slide {\n  id: number;\n  title: string;\n  content: string;\n}\n\nconst slides: Slide[] = [\n  {\n    id: 1,\n    title: \"A Curiosity Engine in Development\",\n    content: \"i<em>DIG</em>.io is a curiosity engine in development to empower people to explore, connect, and create resonantly without surrendering their privacy or agency. Data is stored locally or in private data stores for people to remain the sovereign curator of their own discoveries.\"\n  },\n  {\n    id: 2,\n    title: \"About i<em>DIG</em>\",\n    content: \"i<em>DIG</em> (Deep Inquiry Generator) is a framework and community in development designed to amplify human curiosity through the use of tools to encourage deep and contextual insights into the information we engage with.\"\n  }\n  // Additional slides can be added here in the future\n];\n\nexport default function SlidePresentation() {\n  const [currentSlide, setCurrentSlide] = useState(0);\n\n  const goToPrevious = () => {\n    setCurrentSlide((prev) => (prev > 0 ? prev - 1 : slides.length - 1));\n  };\n\n  const goToNext = () => {\n    setCurrentSlide((prev) => (prev < slides.length - 1 ? prev + 1 : 0));\n  };\n\n  // Auto-advance slides every 20 seconds\n  useEffect(() => {\n    const interval = setInterval(() => {\n      goToNext();\n    }, 20000); // 20 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const slide = slides[currentSlide];\n\n  return (\n    <div className=\"relative bg-white rounded-2xl px-12 md:px-16 pt-6 md:pt-8 pb-12 md:pb-16 mb-16 shadow-lg border border-gray-200\">\n      {/* Navigation Arrows */}\n      <div className=\"flex items-center justify-between absolute top-1/2 left-4 right-4 transform -translate-y-1/2\">\n        <button \n          onClick={goToPrevious}\n          className={`p-3 rounded-full bg-white shadow-md hover:shadow-lg transition-all duration-200 ${\n            slides.length <= 1 ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-50'\n          }`}\n          disabled={slides.length <= 1}\n        >\n          <ChevronLeft className=\"w-5 h-5 text-gray-700\" />\n        </button>\n        <button \n          onClick={goToNext}\n          className={`p-3 rounded-full bg-white shadow-md hover:shadow-lg transition-all duration-200 ${\n            slides.length <= 1 ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-50'\n          }`}\n          disabled={slides.length <= 1}\n        >\n          <ChevronRight className=\"w-5 h-5 text-gray-700\" />\n        </button>\n      </div>\n      \n      {/* Slide Content */}\n      <div className=\"mx-8\">\n        <div className=\"text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-light mb-8 charcoal\">\n            {slide.title}\n          </h2>\n          <p className=\"text-lg md:text-xl text-gray-600 leading-relaxed max-w-3xl mx-auto\">\n            {slide.id === 1 && (\n              <>i<em>DIG</em>.io is a curiosity engine in development to empower people to explore, connect, and create resonantly without surrendering their privacy or agency. Data is stored locally or in private data stores for people to remain the sovereign curator of their own discoveries.</>\n            )}\n            {slide.id === 2 && (\n              <>i<em>DIG</em> (Deep Inquiry Generator) is a framework and community in development designed to amplify human curiosity through the use of tools to encourage deep and contextual insights into the information we engage with.</>\n            )}\n          </p>\n        </div>\n      </div>\n      \n      {/* Slide Indicators */}\n      <div className=\"flex justify-center mt-8 space-x-2\">\n        {slides.map((_, index) => (\n          <div \n            key={index}\n            className={`w-2 h-2 rounded-full transition-colors duration-200 ${\n              index === currentSlide ? 'bg-blue-500' : 'bg-gray-300'\n            }`}\n          />\n        ))}\n        {/* Show placeholder indicators for future slides */}\n        {slides.length < 3 && [...Array(3 - slides.length)].map((_, index) => (\n          <div \n            key={`placeholder-${index}`}\n            className=\"w-2 h-2 rounded-full bg-gray-200 opacity-50\"\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4220},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/About.tsx":{"content":"import Navigation from \"@/components/Navigation\";\nimport NewsletterSignup from \"@/components/NewsletterSignup\";\nimport { Link } from \"wouter\";\n\nexport default function About() {\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navigation />\n      \n      <main className=\"pt-10\">\n        <section className=\"pt-0 pb-8\">\n          <div className=\"max-w-4xl mx-auto px-6\">\n            {/* About iDIG Card */}\n            <div className=\"bg-white rounded-2xl px-12 pt-6 pb-12 shadow-lg border border-gray-200 mb-10\">\n              <div className=\"text-left max-w-3xl mx-auto\">\n                <h1 className=\"text-4xl md:text-5xl font-light mb-8 text-center\">About i<em>DIG</em></h1>\n                \n                <div className=\"space-y-6 text-lg text-gray-700 leading-relaxed\">\n                  <p>\n                    i<em>DIG</em> (Deep Inquiry Generator) is a framework and community in development designed to amplify human curiosity through the use of tools to encourage deep and contextual insights into the information we engage with.\n                  </p>\n                  \n                  <p>\n                    My name is Paul Duplantis. I am not a programmer or coder. I've spent my life as a marketer, consultant, recruiter, and a lifelong learner, but I've carried a vision which is to create tools that make discovery more meaningful, private, and human than what has evolved. Upon the arrival of generative AI, I decided to build a framework from scratch with only the assistance of GenAI tools to test this vision.\n                  </p>\n                  \n                  <p>\n                    The idea all along was to get the framework to a fully functioning demo then collaborate to scale the framework from there.\n                  </p>\n                  \n                  <p>\n                    Check out my <Link href=\"/blog/introduction-to-idig\" className=\"text-blue-500 hover:text-blue-600 transition-colors font-medium\">introductory blog</Link> for a better idea of the plan. Feel free to <Link href=\"/contact\" className=\"text-blue-500 hover:text-blue-600 transition-colors font-medium\">contact me</Link> with questions, ideas for collaboration, feedback, or would like to share what you are building that speak to these ideas as I am looking for tech to feature in my monthly newsletter, <Link href=\"/newsletter\" className=\"text-blue-500 hover:text-blue-600 transition-colors font-medium\">The Resonant Builders Monthly</Link>.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* Newsletter Signup */}\n            <NewsletterSignup />\n          </div>\n        </section>\n      </main>\n      \n      {/* Footer */}\n      <footer className=\"bg-gray-800 text-white py-8\">\n        <div className=\"max-w-6xl mx-auto px-6\">\n          <div className=\"text-center\">\n            <div className=\"text-xl font-medium mb-4 text-blue-400\">\n              i<em>DIG</em>.io\n            </div>\n            <p className=\"text-gray-400 text-sm\">\n              Resonant Tools for Curious Minds\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":3158},"client/src/pages/Book.tsx":{"content":"import Navigation from \"@/components/Navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\n\ninterface Chapter {\n  number: number;\n  title: string;\n  description: string;\n  available: boolean;\n}\n\nconst chapters: Chapter[] = [\n  { number: 1, title: \"The Foundation of Resonance\", description: \"Understanding the principles that make tools truly resonate with users.\", available: true },\n  { number: 2, title: \"Curiosity-Driven Design\", description: \"Designing interfaces that nurture and amplify human curiosity.\", available: true },\n  { number: 3, title: \"Building for Depth\", description: \"Creating experiences that encourage deep engagement over surface-level interaction.\", available: true },\n  { number: 4, title: \"The Architecture of Understanding\", description: \"Structuring information and interactions to support comprehension.\", available: true },\n  { number: 5, title: \"Meaningful Connections\", description: \"Facilitating connections between ideas, content, and understanding.\", available: true },\n  { number: 6, title: \"Tools for Reflection\", description: \"Designing features that encourage reflection and deeper thinking.\", available: true },\n  { number: 7, title: \"The Psychology of Engagement\", description: \"Understanding how minds engage with digital tools and content.\", available: false },\n  { number: 8, title: \"Information Architecture for Insight\", description: \"Organizing information to support discovery and understanding.\", available: false },\n  { number: 9, title: \"Designing for Serendipity\", description: \"Creating systems that enable unexpected but meaningful discoveries.\", available: false },\n  { number: 10, title: \"The Art of Digital Annotation\", description: \"Helping users interact meaningfully with text and media.\", available: false },\n  { number: 11, title: \"Building Personal Knowledge Systems\", description: \"Tools that help individuals create their own learning ecosystems.\", available: false },\n  { number: 12, title: \"Collaborative Understanding\", description: \"Facilitating shared knowledge building and group insight.\", available: false },\n  { number: 13, title: \"The Ethics of Attention\", description: \"Responsible design in an attention-scarce world.\", available: false },\n  { number: 14, title: \"Measuring True Engagement\", description: \"Metrics that matter for deep interaction and learning.\", available: false },\n  { number: 15, title: \"The Future of Reading\", description: \"How digital tools can enhance rather than replace traditional reading.\", available: false },\n  { number: 16, title: \"Contextual Intelligence\", description: \"Building systems that understand and respond to user context.\", available: false },\n  { number: 17, title: \"The Social Dimension of Learning\", description: \"How community enhances individual understanding.\", available: false },\n  { number: 18, title: \"Adaptive Interfaces\", description: \"Creating tools that grow and change with their users.\", available: false },\n  { number: 19, title: \"The Philosophy of Digital Tools\", description: \"Examining the deeper questions about technology and human flourishing.\", available: false },\n  { number: 20, title: \"Prototyping for Resonance\", description: \"Methods for testing and refining tools for deep engagement.\", available: false },\n  { number: 21, title: \"The Economics of Attention\", description: \"Building sustainable models for attention-respectful tools.\", available: false },\n  { number: 22, title: \"Cross-Platform Thinking\", description: \"Creating coherent experiences across different devices and contexts.\", available: false },\n  { number: 23, title: \"The Role of AI in Understanding\", description: \"How artificial intelligence can support rather than replace human insight.\", available: false },\n  { number: 24, title: \"Building for Accessibility\", description: \"Ensuring resonant tools work for everyone.\", available: false },\n  { number: 25, title: \"The Long Game\", description: \"Building tools and systems that remain valuable over time.\", available: false },\n  { number: 26, title: \"A Resonant Future\", description: \"Imagining a world where technology truly serves human curiosity.\", available: false },\n];\n\nexport default function Book() {\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navigation />\n      \n      <main className=\"pt-20\">\n        <section className=\"py-20\">\n          <div className=\"max-w-6xl mx-auto px-6\">\n            <div className=\"text-center mb-16\">\n              <h1 className=\"text-4xl md:text-5xl font-light mb-6\">We the Resonant Builders</h1>\n              <p className=\"text-xl text-gray-600 max-w-2xl mx-auto mb-8\">\n                A comprehensive guide to creating tools and systems that resonate with human curiosity \n                and foster meaningful engagement with digital content.\n              </p>\n              <div className=\"text-gray-500 text-sm\">\n                26 chapters • Available in PDF, ePub, and Kindle formats\n              </div>\n            </div>\n\n            {/* Chapter Grid */}\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-16\">\n              {chapters.map((chapter) => (\n                <div\n                  key={chapter.number}\n                  className={`rounded-xl p-6 shadow-md transition-all duration-200 ${\n                    chapter.available\n                      ? \"bg-white hover:shadow-lg group cursor-pointer\"\n                      : \"bg-gray-50 opacity-60\"\n                  }`}\n                >\n                  {chapter.available ? (\n                    <Link href={`/book/chapter/${chapter.number}`} className=\"block\">\n                      <div className=\"text-blue-500 text-sm font-medium mb-2\">\n                        Chapter {chapter.number}\n                      </div>\n                      <h3 className=\"text-lg font-medium mb-3 group-hover:text-blue-500 transition-colors\">\n                        {chapter.title}\n                      </h3>\n                      <p className=\"text-gray-500 text-sm\">\n                        {chapter.description}\n                      </p>\n                    </Link>\n                  ) : (\n                    <>\n                      <div className=\"text-gray-400 text-sm font-medium mb-2\">\n                        Chapter {chapter.number}\n                      </div>\n                      <h3 className=\"text-lg font-medium mb-3 text-gray-600\">\n                        {chapter.title}\n                      </h3>\n                      <p className=\"text-gray-400 text-sm mb-2\">\n                        {chapter.description}\n                      </p>\n                      <div className=\"text-xs text-gray-400 font-medium\">\n                        Coming Soon\n                      </div>\n                    </>\n                  )}\n                </div>\n              ))}\n            </div>\n\n            {/* About the Book */}\n            <div className=\"light-gray-bg rounded-2xl p-8 mb-16\">\n              <div className=\"max-w-4xl mx-auto\">\n                <h2 className=\"text-2xl font-medium mb-6 text-center\">About the Book</h2>\n                <div className=\"grid md:grid-cols-2 gap-8\">\n                  <div>\n                    <h3 className=\"font-medium mb-3\">What You'll Learn</h3>\n                    <ul className=\"space-y-2 text-gray-600 text-sm\">\n                      <li>• Principles of designing for deep engagement</li>\n                      <li>• How to build tools that respect human attention</li>\n                      <li>• Methods for fostering curiosity and insight</li>\n                      <li>• The psychology behind meaningful digital interactions</li>\n                      <li>• Practical frameworks for resonant design</li>\n                      <li>• Case studies from successful implementations</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h3 className=\"font-medium mb-3\">Who It's For</h3>\n                    <ul className=\"space-y-2 text-gray-600 text-sm\">\n                      <li>• UX designers seeking deeper impact</li>\n                      <li>• Product managers building meaningful tools</li>\n                      <li>• Developers interested in human-centered design</li>\n                      <li>• Educators exploring digital learning</li>\n                      <li>• Anyone passionate about technology's role in human flourishing</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Download Section */}\n            <div className=\"text-center\">\n              <Button className=\"apple-button bg-gray-800 hover:bg-gray-700 text-white px-8 py-4 text-lg font-medium shadow-lg mb-4\">\n                Download Complete Book\n              </Button>\n              <p className=\"text-gray-500\">\n                Available in PDF, ePub, and Kindle formats • Free for early supporters\n              </p>\n            </div>\n          </div>\n        </section>\n      </main>\n    </div>\n  );\n}\n","size_bytes":9056},"client/src/pages/Chapter.tsx":{"content":"import Navigation from \"@/components/Navigation\";\nimport { useParams, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronLeft, ChevronRight, ArrowLeft } from \"lucide-react\";\n\ninterface ChapterContent {\n  number: number;\n  title: string;\n  content: string[];\n  keyTakeaways: string[];\n  nextChapter?: number;\n  prevChapter?: number;\n}\n\nconst chapterData: Record<number, ChapterContent> = {\n  1: {\n    number: 1,\n    title: \"The Foundation of Resonance\",\n    content: [\n      \"In the vast landscape of digital tools and platforms, few truly resonate with their users. What distinguishes a tool that merely functions from one that genuinely resonates? The answer lies in understanding the fundamental principles that create meaningful connections between human minds and digital systems.\",\n      \"Resonance, in the context of digital tools, refers to the harmonious alignment between a tool's design, functionality, and the user's deeper needs and aspirations. It's the difference between a hammer that simply drives nails and one that feels perfectly balanced in a craftsperson's hand—extending their capability rather than merely providing function.\",\n      \"The first principle of resonance is authenticity. Tools that resonate don't try to manipulate or trick users into engagement. Instead, they honestly serve the user's genuine interests and goals. This means designing with transparency, respecting user agency, and prioritizing long-term value over short-term metrics.\",\n      \"The second principle is adaptability. Resonant tools grow with their users, learning from interactions and evolving to better serve changing needs. They don't impose rigid workflows but instead provide flexible frameworks that accommodate different thinking styles and approaches.\",\n      \"Understanding these principles is crucial for anyone seeking to build tools that don't just capture attention, but truly serve human flourishing. In the chapters that follow, we'll explore how these principles manifest in practical design decisions and development choices.\"\n    ],\n    keyTakeaways: [\n      \"Resonance comes from alignment between tool design and genuine user needs\",\n      \"Authenticity means serving users honestly, not manipulating engagement\",\n      \"Adaptability allows tools to grow with users over time\",\n      \"Function alone is insufficient—tools must extend human capability\"\n    ],\n    nextChapter: 2\n  },\n  2: {\n    number: 2,\n    title: \"Curiosity-Driven Design\",\n    content: [\n      \"Human curiosity is one of our species' greatest assets, yet most digital tools inadvertently suppress it. Instead of fostering wonder and exploration, they optimize for immediate satisfaction and quick dopamine hits. Curiosity-driven design takes a fundamentally different approach.\",\n      \"At its core, curiosity-driven design recognizes that genuine learning and growth happen not when we're fed answers, but when we're inspired to ask better questions. This means creating interfaces that reveal rather than conceal complexity, that show connections rather than hiding them, that invite exploration rather than providing predetermined paths.\",\n      \"Consider the difference between a search engine that simply returns results and one that also shows the relationships between concepts, the evolution of ideas over time, or the questions that led to current understanding. The latter doesn't just provide information—it provides context that sparks further inquiry.\",\n      \"Curiosity-driven design also means embracing uncertainty and incompleteness. Rather than presenting information as final and authoritative, resonant tools acknowledge the provisional nature of knowledge and invite users to participate in the ongoing process of discovery and understanding.\",\n      \"The goal is not to answer all questions, but to help users develop better questions and more sophisticated ways of thinking about complex topics. This requires a fundamental shift from information delivery to insight facilitation.\"\n    ],\n    keyTakeaways: [\n      \"Most digital tools suppress rather than foster human curiosity\",\n      \"Good design reveals complexity and connections rather than hiding them\",\n      \"Embracing uncertainty and incompleteness invites deeper engagement\",\n      \"The goal is facilitating insight, not just delivering information\"\n    ],\n    nextChapter: 3,\n    prevChapter: 1\n  },\n  3: {\n    number: 3,\n    title: \"Building for Depth\",\n    content: [\n      \"In an era of endless scrolling and bite-sized content, building for depth requires swimming against the current of contemporary digital culture. Depth is not just about length of engagement—it's about the quality and meaningfulness of that engagement.\",\n      \"Deep engagement happens when users can immerse themselves fully in content or ideas without constant interruption or distraction. This means designing interfaces that support sustained attention rather than fragmenting it, that provide space for reflection rather than demanding immediate response.\",\n      \"Building for depth also means creating layered experiences. Like a good book that reveals new insights on rereading, resonant tools offer different levels of engagement. Surface-level users can quickly accomplish their goals, while those seeking deeper understanding can dive into additional layers of context, connection, and complexity.\",\n      \"The architecture of deep engagement includes several key elements: progressive disclosure that reveals complexity gradually, contextual depth that shows how pieces fit into larger wholes, and temporal depth that acknowledges the time required for real understanding to develop.\",\n      \"Perhaps most importantly, building for depth means respecting the user's time and attention as precious resources. Every design decision should ask: 'Does this support deeper understanding, or does it merely increase engagement metrics?' The distinction is crucial.\"\n    ],\n    keyTakeaways: [\n      \"Depth is about quality of engagement, not just duration\",\n      \"Sustained attention requires interfaces free from constant interruption\",\n      \"Layered experiences serve both casual and deep users effectively\",\n      \"Progressive disclosure reveals complexity at an appropriate pace\"\n    ],\n    nextChapter: 4,\n    prevChapter: 2\n  },\n  4: {\n    number: 4,\n    title: \"The Architecture of Understanding\",\n    content: [\n      \"Understanding is not a binary state—it's a complex, evolving process that unfolds over time through interaction with ideas, concepts, and other minds. The architecture of understanding refers to how we structure information and interactions to support this natural process of comprehension.\",\n      \"Traditional information architecture focuses on organization and findability. While these remain important, the architecture of understanding goes deeper, considering how information connects, how understanding builds upon itself, and how insights emerge from the interplay between different concepts and perspectives.\",\n      \"One key principle is scaffolding—providing the right amount of support at each stage of understanding. Just as physical scaffolding supports construction while being gradually removed, informational scaffolding should provide context and guidance that can be reduced as understanding develops.\",\n      \"Another crucial element is the creation of conceptual bridges—explicit connections between ideas that might otherwise seem unrelated. These bridges help users see patterns, transfer knowledge between domains, and develop more sophisticated mental models.\",\n      \"The architecture of understanding also considers the social dimension of comprehension. Knowledge is not built in isolation, and resonant tools create opportunities for users to learn from each other, to see how different minds approach the same problems, and to contribute to collective understanding.\"\n    ],\n    keyTakeaways: [\n      \"Understanding is a process, not a destination\",\n      \"Information architecture should support the development of comprehension\",\n      \"Scaffolding provides appropriate support that reduces as understanding grows\",\n      \"Conceptual bridges help users see connections between ideas\"\n    ],\n    nextChapter: 5,\n    prevChapter: 3\n  },\n  5: {\n    number: 5,\n    title: \"Meaningful Connections\",\n    content: [\n      \"The human mind is fundamentally relational—we understand new concepts by connecting them to what we already know, and we find meaning through relationships between ideas, experiences, and other people. Resonant tools recognize and support this fundamental aspect of human cognition.\",\n      \"Meaningful connections operate at multiple levels. At the data level, tools can surface relationships between pieces of information that might not be immediately obvious. At the conceptual level, they can help users see how ideas from different domains relate to each other. At the personal level, they can connect individual insights to broader patterns of meaning.\",\n      \"Creating meaningful connections requires more than just linking related content. It requires understanding the different types of relationships that exist—causal, analogical, hierarchical, temporal—and presenting them in ways that enhance rather than overwhelm understanding.\",\n      \"The key is to make connections discoverable without making them overwhelming. This might mean using visual techniques to show relationships, providing contextual information about why connections matter, or allowing users to explore connections at their own pace and according to their own interests.\",\n      \"Meaningful connections also extend beyond individual users to communities of practice. When tools help people see how their interests and insights connect with those of others, they create opportunities for collaboration, learning, and collective sense-making that benefit everyone involved.\"\n    ],\n    keyTakeaways: [\n      \"Human understanding is fundamentally relational and connection-based\",\n      \"Connections exist at multiple levels: data, conceptual, and personal\",\n      \"Different types of relationships require different presentation approaches\",\n      \"Discoverability must be balanced with cognitive manageability\"\n    ],\n    nextChapter: 6,\n    prevChapter: 4\n  },\n  6: {\n    number: 6,\n    title: \"Tools for Reflection\",\n    content: [\n      \"In our rush to consume and produce information, we often skip one of the most crucial steps in learning and understanding: reflection. Reflection is the process by which experiences become knowledge, insights become wisdom, and information becomes understanding.\",\n      \"Tools for reflection go beyond simple note-taking or journaling features. They create structured opportunities for users to pause, consider, and integrate what they've encountered. This might include prompting questions that encourage deeper thinking, providing space for personal connections and insights, or creating ways to revisit and reconsider previous thoughts.\",\n      \"Effective reflection tools understand that reflection is not a one-time activity but an ongoing process. They support both immediate reflection (What does this mean to me right now?) and longer-term reflection (How has my understanding of this evolved over time?). They help users track the development of their own thinking and see patterns in their learning.\",\n      \"The design of reflection tools must balance structure with freedom. Too much structure can constrain thinking, while too little can leave users uncertain about how to begin. The goal is to provide enough guidance to get started while allowing for organic development of ideas and insights.\",\n      \"Perhaps most importantly, reflection tools must create safe spaces for honest self-examination. This means protecting user privacy, avoiding judgment or evaluation, and focusing on personal growth rather than external validation. The goal is to support authentic thinking, not to create content for others.\"\n    ],\n    keyTakeaways: [\n      \"Reflection transforms experiences into understanding and wisdom\",\n      \"Effective reflection is an ongoing process, not a one-time activity\",\n      \"Design must balance structure with freedom for authentic thinking\",\n      \"Safe spaces for honest self-examination are essential\"\n    ],\n    prevChapter: 5\n  }\n};\n\nexport default function Chapter() {\n  const params = useParams();\n  const chapterNumber = parseInt(params.chapterNumber || \"1\");\n  const chapter = chapterData[chapterNumber];\n\n  if (!chapter) {\n    return (\n      <div className=\"min-h-screen bg-white\">\n        <Navigation />\n        <main className=\"pt-20\">\n          <div className=\"max-w-4xl mx-auto px-6 py-20\">\n            <div className=\"text-center\">\n              <h1 className=\"text-2xl font-medium mb-4\">Chapter Not Found</h1>\n              <p className=\"text-gray-600 mb-8\">\n                This chapter is not yet available or doesn't exist.\n              </p>\n              <Link href=\"/book\">\n                <Button className=\"apple-button bg-blue-500 hover:bg-blue-600 text-white\">\n                  Back to Book\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navigation />\n      \n      <main className=\"pt-20\">\n        <article className=\"py-20\">\n          <div className=\"max-w-4xl mx-auto px-6\">\n            {/* Chapter Header */}\n            <header className=\"mb-12\">\n              <Link href=\"/book\" className=\"inline-flex items-center text-blue-500 hover:text-blue-600 transition-colors mb-6\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Book\n              </Link>\n              \n              <div className=\"text-blue-500 text-sm font-medium mb-2\">\n                Chapter {chapter.number}\n              </div>\n              <h1 className=\"text-4xl md:text-5xl font-light mb-4\">\n                {chapter.title}\n              </h1>\n            </header>\n\n            {/* Chapter Content */}\n            <div className=\"prose prose-lg max-w-none mb-12\">\n              {chapter.content.map((paragraph, index) => (\n                <p key={index} className=\"text-gray-700 leading-relaxed mb-6\">\n                  {paragraph}\n                </p>\n              ))}\n            </div>\n\n            {/* Key Takeaways */}\n            <div className=\"light-gray-bg rounded-2xl p-8 mb-12\">\n              <h2 className=\"text-xl font-medium mb-4\">Key Takeaways</h2>\n              <ul className=\"space-y-2\">\n                {chapter.keyTakeaways.map((takeaway, index) => (\n                  <li key={index} className=\"text-gray-700 flex items-start\">\n                    <span className=\"text-blue-500 mr-3 mt-1\">•</span>\n                    {takeaway}\n                  </li>\n                ))}\n              </ul>\n            </div>\n\n            {/* Chapter Navigation */}\n            <nav className=\"flex justify-between items-center pt-8 border-t border-gray-200\">\n              <div>\n                {chapter.prevChapter && (\n                  <Link href={`/book/chapter/${chapter.prevChapter}`}>\n                    <Button variant=\"outline\" className=\"apple-button\">\n                      <ChevronLeft className=\"w-4 h-4 mr-2\" />\n                      Previous Chapter\n                    </Button>\n                  </Link>\n                )}\n              </div>\n              \n              <div>\n                {chapter.nextChapter && (\n                  <Link href={`/book/chapter/${chapter.nextChapter}`}>\n                    <Button className=\"apple-button\">\n                      Next Chapter\n                      <ChevronRight className=\"w-4 h-4 ml-2\" />\n                    </Button>\n                  </Link>\n                )}\n              </div>\n            </nav>\n          </div>\n        </article>\n      </main>\n    </div>\n  );\n}\n","size_bytes":15989},"client/src/pages/Contact.tsx":{"content":"import Navigation from \"@/components/Navigation\";\nimport { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Mail, MessageSquare, Users, Globe } from \"lucide-react\";\n\ninterface ContactForm {\n  name: string;\n  email: string;\n  subject: string;\n  message: string;\n}\n\nexport default function Contact() {\n  const [formData, setFormData] = useState<ContactForm>({\n    name: \"\",\n    email: \"\",\n    subject: \"\",\n    message: \"\",\n  });\n  \n  const { toast } = useToast();\n\n  const contactMutation = useMutation({\n    mutationFn: async (data: ContactForm) => {\n      return apiRequest(\"POST\", \"/api/contact\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message sent!\",\n        description: \"Thank you for reaching out. We'll get back to you soon.\",\n      });\n      setFormData({ name: \"\", email: \"\", subject: \"\", message: \"\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to send message\",\n        description: error.message || \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.name.trim() || !formData.email.trim() || !formData.subject.trim() || !formData.message.trim()) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    contactMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field: keyof ContactForm) => (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    setFormData(prev => ({ ...prev, [field]: e.target.value }));\n  };\n\n  const handleSelectChange = (value: string) => {\n    setFormData(prev => ({ ...prev, subject: value }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navigation />\n      \n      <main className=\"pt-20\">\n        <section className=\"py-20 light-gray-bg\">\n          <div className=\"max-w-4xl mx-auto px-6\">\n            <div className=\"text-center mb-16\">\n              <h1 className=\"text-4xl md:text-5xl font-light mb-6\">Get in Touch</h1>\n              <p className=\"text-xl text-gray-600\">\n                Have questions about i<em>DIG</em> or want to join the early access program?\n              </p>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-12\">\n              {/* Contact Form */}\n              <Card className=\"shadow-md\">\n                <CardContent className=\"p-8\">\n                  <h2 className=\"text-2xl font-medium mb-6\">Send us a message</h2>\n                  <form onSubmit={handleSubmit} className=\"space-y-6\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Name *\n                      </label>\n                      <Input\n                        type=\"text\"\n                        value={formData.name}\n                        onChange={handleInputChange(\"name\")}\n                        disabled={contactMutation.isPending}\n                        required\n                      />\n                    </div>\n                    \n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Email *\n                      </label>\n                      <Input\n                        type=\"email\"\n                        value={formData.email}\n                        onChange={handleInputChange(\"email\")}\n                        disabled={contactMutation.isPending}\n                        required\n                      />\n                    </div>\n                    \n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Subject *\n                      </label>\n                      <Select \n                        value={formData.subject} \n                        onValueChange={handleSelectChange}\n                        disabled={contactMutation.isPending}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select a topic\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"Early Access Request\">Early Access Request</SelectItem>\n                          <SelectItem value=\"General Inquiry\">General Inquiry</SelectItem>\n                          <SelectItem value=\"Book Question\">Book Question</SelectItem>\n                          <SelectItem value=\"Partnership\">Partnership</SelectItem>\n                          <SelectItem value=\"Other\">Other</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Message *\n                      </label>\n                      <Textarea\n                        rows={4}\n                        value={formData.message}\n                        onChange={handleInputChange(\"message\")}\n                        disabled={contactMutation.isPending}\n                        className=\"resize-none\"\n                        required\n                      />\n                    </div>\n                    \n                    <Button\n                      type=\"submit\"\n                      className=\"w-full apple-button py-3\"\n                      disabled={contactMutation.isPending}\n                    >\n                      {contactMutation.isPending ? \"Sending...\" : \"Send Message\"}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n\n              {/* Contact Information */}\n              <div className=\"space-y-8\">\n                <Card className=\"shadow-md\">\n                  <CardContent className=\"p-8\">\n                    <h3 className=\"text-xl font-medium mb-4\">Early Access Program</h3>\n                    <p className=\"text-gray-600 mb-4\">\n                      i<em>DIG</em> is currently in invite-only beta. Join our early access program to be among \n                      the first to experience resonant tools for curious minds.\n                    </p>\n                    <div className=\"flex items-center text-blue-500\">\n                      <Mail className=\"w-5 h-5 mr-3\" />\n                      <span>early-access@idig.io</span>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"shadow-md\">\n                  <CardContent className=\"p-8\">\n                    <h3 className=\"text-xl font-medium mb-4\">Connect With Us</h3>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center text-gray-600\">\n                        <MessageSquare className=\"w-5 h-5 mr-3 text-blue-500\" />\n                        <span>@idig_tools</span>\n                      </div>\n                      <div className=\"flex items-center text-gray-600\">\n                        <Users className=\"w-5 h-5 mr-3 text-blue-500\" />\n                        <span>i<em>DIG</em> Tools</span>\n                      </div>\n                      <div className=\"flex items-center text-gray-600\">\n                        <Globe className=\"w-5 h-5 mr-3 text-blue-500\" />\n                        <span>blog.idig.io</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"shadow-md\">\n                  <CardContent className=\"p-8\">\n                    <h3 className=\"text-xl font-medium mb-4\">Response Time</h3>\n                    <p className=\"text-gray-600 text-sm mb-2\">\n                      We typically respond within 24-48 hours during business days.\n                    </p>\n                    <p className=\"text-gray-600 text-sm\">\n                      For urgent matters related to early access, please mention \"URGENT\" in your subject line.\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n    </div>\n  );\n}\n","size_bytes":8739},"client/src/pages/Demo.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Share2 } from \"lucide-react\";\n\ninterface DemoSlide {\n  id: string;\n  type: 'intro' | 'video' | 'callout';\n  title?: string;\n  content?: string;\n  videoUrl?: string;\n  duration?: number;\n  order: number;\n}\n\ninterface DemoPresentation {\n  id: string;\n  title: string;\n  slug: string;\n  description?: string;\n  slides: DemoSlide[];\n}\n\nexport default function Demo() {\n  const params = useParams();\n  const [, navigate] = useLocation();\n  const slug = params.slug || 'idig-demo';\n  \n  const [currentSlide, setCurrentSlide] = useState(0);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  \n  // Check if this is a shared link visit\n  const urlParams = new URLSearchParams(window.location.search);\n  const isSharedView = urlParams.has('shared');\n\n  // Mock data for different demos\n  const getDemoPresentation = (slug: string): DemoPresentation => {\n    switch (slug) {\n      case 'idig-lens':\n        return {\n          id: '2',\n          title: 'i<em>DIG</em> Lens Demo',\n          slug: 'idig-lens',\n          description: 'Highlight, save, and explore insights',\n          slides: [\n            {\n              id: '1',\n              type: 'video',\n              title: 'i<em>DIG</em> Lens Demo',\n              videoUrl: 'https://f004.backblazeb2.com/file/idigdemo/idig_demo_final.mp4',\n              order: 1\n            }\n          ]\n        };\n      case 'idig-feeds':\n        return {\n          id: '3',\n          title: 'i<em>DIG</em> Feeds',\n          slug: 'idig-feeds',\n          description: 'Turn searches into discovery engines',\n          slides: [\n            {\n              id: '1',\n              type: 'intro',\n              title: 'i<em>DIG</em> Feeds',\n              content: 'Convert your search queries into intelligent discovery feeds. Track topics of interest and receive curated content that deepens your understanding over time.',\n              order: 1\n            }\n          ]\n        };\n      case 'idig-matching':\n        return {\n          id: '4',\n          title: 'i<em>DIG</em> Matching',\n          slug: 'idig-matching',\n          description: 'AI-powered skill and experience matching',\n          slides: [\n            {\n              id: '1',\n              type: 'intro',\n              title: 'i<em>DIG</em> Matching',\n              content: 'Intelligent matching system that connects your skills, interests, and learning goals with relevant opportunities, people, and resources across the web.',\n              order: 1\n            }\n          ]\n        };\n      case 'idig-scenes':\n        return {\n          id: '5',\n          title: 'i<em>DIG</em> Scenes',\n          slug: 'idig-scenes',\n          description: 'Curate rich experiences around ideas',\n          slides: [\n            {\n              id: '1',\n              type: 'intro',\n              title: 'i<em>DIG</em> Scenes',\n              content: 'Create immersive, contextual environments around your ideas. Organize related content, conversations, and insights into rich, explorable scenes.',\n              order: 1\n            }\n          ]\n        };\n      default: // idig-demo\n        return {\n          id: '1',\n          title: 'i<em>DIG</em> Demo',\n          slug: 'idig-demo',\n          description: 'Interactive demonstration of i<em>DIG</em> capabilities',\n          slides: [\n            {\n              id: '1',\n              type: 'intro',\n              title: 'i<em>DIG</em> (Deep Inquiry Generator)',\n              content: 'i<em>DIG</em> (Deep Inquiry Generator) is a chrome extension in development. The following presentation is for demonstration purposes only.\\n\\nI will add more text later.',\n              order: 1\n            },\n            {\n              id: '2', \n              type: 'video',\n              title: 'i<em>DIG</em> Movable Menu',\n              videoUrl: '/objects/uploads/idig-movable-menu.mp4', // Will be updated with actual path\n              order: 2\n            }\n          ]\n        };\n    }\n  };\n\n  const mockPresentation = getDemoPresentation(slug);\n\n  const { data: presentation } = useQuery({\n    queryKey: ['/api/presentations', slug],\n    queryFn: () => Promise.resolve(mockPresentation), // Will be replaced with actual API\n    enabled: !!slug,\n  });\n\n  const handleNext = () => {\n    if (presentation && currentSlide < presentation.slides.length - 1) {\n      setCurrentSlide(currentSlide + 1);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentSlide > 0) {\n      setCurrentSlide(currentSlide - 1);\n    }\n  };\n\n  const toggleFullscreen = () => {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen();\n      setIsFullscreen(true);\n    } else {\n      document.exitFullscreen();\n      setIsFullscreen(false);\n    }\n  };\n\n  const exitToHomepage = () => {\n    navigate('/');\n    // Small delay to ensure navigation completes before scrolling\n    setTimeout(() => {\n      const demoSection = document.querySelector('[data-testid=\"demo-section\"]');\n      if (demoSection) {\n        demoSection.scrollIntoView({ \n          behavior: 'smooth', \n          block: 'center' \n        });\n      }\n    }, 100);\n  };\n\n  const shareVideo = async () => {\n    if (presentation) {\n      // Create the demo presentation URL with shared parameter\n      const demoUrl = `${window.location.origin}/demo/${presentation.slug}?shared=true`;\n      \n      try {\n        if (navigator.share) {\n          // Use native share API if available\n          await navigator.share({\n            title: `${presentation.title} - i<em>DIG</em> Demo`,\n            text: `Check out this interactive demo: ${presentation.title}`,\n            url: demoUrl,\n          });\n        } else {\n          // Fallback to clipboard\n          await navigator.clipboard.writeText(demoUrl);\n          console.log('Demo link copied to clipboard!');\n        }\n      } catch (error) {\n        // Fallback for older browsers\n        const textArea = document.createElement('textarea');\n        textArea.value = demoUrl;\n        document.body.appendChild(textArea);\n        textArea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n        console.log('Demo link copied to clipboard!');\n      }\n    }\n  };\n\n  const handleKeyPress = (e: KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowRight':\n      case ' ':\n        e.preventDefault();\n        handleNext();\n        break;\n      case 'ArrowLeft':\n        e.preventDefault();\n        handlePrevious();\n        break;\n      case 'f':\n      case 'F':\n        e.preventDefault();\n        toggleFullscreen();\n        break;\n      case 'Escape':\n        if (isFullscreen) {\n          setIsFullscreen(false);\n        }\n        break;\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyPress);\n    return () => document.removeEventListener('keydown', handleKeyPress);\n  }, [currentSlide, isFullscreen]);\n\n  useEffect(() => {\n    const handleFullscreenChange = () => {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n    \n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    return () => document.removeEventListener('fullscreenchange', handleFullscreenChange);\n  }, []);\n\n  if (!presentation) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-medium mb-4\">Loading presentation...</h1>\n        </div>\n      </div>\n    );\n  }\n\n  const currentSlideData = presentation.slides[currentSlide];\n  const isLastSlide = currentSlide === presentation.slides.length - 1;\n  const isFirstSlide = currentSlide === 0;\n\n  return (\n    <div className={`${isFullscreen ? 'fixed inset-0 z-50' : 'min-h-screen'} ${currentSlideData?.type === 'video' ? 'bg-transparent' : 'bg-black'} text-white flex flex-col`}>\n      {/* Header Controls */}\n      {!isFullscreen && (\n        <div className=\"bg-gray-900 p-4 flex items-center justify-between\">\n          <button\n            onClick={exitToHomepage}\n            className=\"text-blue-400 hover:text-blue-300 transition-colors\"\n          >\n            ← Back to i<em>DIG</em>\n          </button>\n          <h1 className=\"text-xl font-medium\">{presentation.title}</h1>\n          <div className=\"flex items-center space-x-3\">\n            {currentSlideData?.type === 'video' && (\n              <button\n                onClick={shareVideo}\n                className=\"bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded-lg transition-colors flex items-center space-x-2\"\n                title=\"Share video\"\n              >\n                <Share2 size={16} />\n                <span>Share</span>\n              </button>\n            )}\n            <button\n              onClick={toggleFullscreen}\n              className=\"bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded-lg transition-colors\"\n            >\n              Fullscreen\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Main Content Area */}\n      <div className={`flex-1 ${currentSlideData?.type === 'video' ? 'flex' : 'flex items-center justify-center'} relative`}>\n        {currentSlideData.type === 'intro' && (\n          <div className=\"max-w-4xl mx-auto px-8 text-center\">\n            <h2 className=\"text-5xl md:text-7xl font-light mb-8 leading-tight\">\n              {currentSlideData.title}\n            </h2>\n            <div className=\"text-xl md:text-2xl text-gray-300 leading-relaxed space-y-6\">\n              {currentSlideData.content?.split('\\n\\n').map((paragraph, index) => (\n                <p key={index}>{paragraph}</p>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {currentSlideData.type === 'video' && (\n          <div className=\"w-full h-full flex items-center justify-center p-4\">\n            <div className=\"relative w-full max-w-6xl\">\n              <video\n                className=\"w-full h-auto max-h-[80vh] object-contain rounded-lg\"\n                controls\n                autoPlay={true}\n                preload=\"metadata\"\n                onPlay={() => setIsPlaying(true)}\n                onPause={() => setIsPlaying(false)}\n              >\n                <source src={currentSlideData.videoUrl} type=\"video/mp4\" />\n                Your browser does not support the video tag.\n              </video>\n              \n              {/* Prominent Play Demo Button Overlay - Only for shared links */}\n              {!isPlaying && isSharedView && (\n                <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n                  <div className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-4 rounded-full shadow-lg transition-all hover:scale-105 pointer-events-auto cursor-pointer flex items-center space-x-3 text-lg font-medium\"\n                       onClick={() => {\n                         const video = document.querySelector('video');\n                         if (video) video.play();\n                       }}>\n                    <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path d=\"M8 5v14l11-7z\"/>\n                    </svg>\n                    <span>Play Demo</span>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {currentSlideData.type === 'callout' && (\n          <div className=\"max-w-4xl mx-auto px-8 text-center\">\n            <h2 className=\"text-4xl md:text-6xl font-light mb-8\">\n              {currentSlideData.title}\n            </h2>\n            <div className=\"text-xl md:text-2xl text-gray-300 leading-relaxed\">\n              {currentSlideData.content}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Bottom Controls - Hidden for single slide presentations */}\n      {presentation.slides.length > 1 && (\n        <div className=\"p-6 flex items-center justify-between bg-gray-900/50\">\n        <button\n          onClick={handlePrevious}\n          disabled={isFirstSlide}\n          className={`px-6 py-2 rounded-lg transition-colors ${\n            isFirstSlide \n              ? 'bg-gray-700 text-gray-500 cursor-not-allowed' \n              : 'bg-blue-600 hover:bg-blue-700 text-white'\n          }`}\n        >\n          Previous\n        </button>\n\n        <div className=\"flex items-center space-x-4\">\n          <span className=\"text-gray-300\">\n            {currentSlide + 1} / {presentation.slides.length}\n          </span>\n          <div className=\"flex space-x-1\">\n            {presentation.slides.map((_, index) => (\n              <div\n                key={index}\n                className={`w-2 h-2 rounded-full transition-colors ${\n                  index === currentSlide ? 'bg-blue-400' : 'bg-gray-600'\n                }`}\n              />\n            ))}\n          </div>\n        </div>\n\n        <button\n          onClick={isLastSlide ? exitToHomepage : handleNext}\n          className=\"bg-blue-600 hover:bg-blue-700 px-6 py-2 rounded-lg transition-colors text-white\"\n        >\n          {isLastSlide ? 'Finish' : 'Next'}\n        </button>\n      </div>\n      )}\n\n      {/* Keyboard shortcuts hint */}\n      {isFullscreen && (\n        <div className=\"absolute top-4 left-4 text-sm text-gray-400 bg-black/50 p-3 rounded-lg\">\n          <div>← → Navigate slides</div>\n          <div>Space: Next slide</div>\n          <div>F: Fullscreen</div>\n          <div>Esc: Exit fullscreen</div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":13614},"client/src/pages/Home.tsx":{"content":"import Navigation from \"@/components/Navigation\";\nimport NewsletterSignup from \"@/components/NewsletterSignup\";\nimport BlogSignup from \"@/components/BlogSignup\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { useState } from \"react\";\n\ninterface DemoContent {\n  id: string;\n  title: string;\n  description: string;\n  features?: string[];\n  videoUrl?: string;\n}\n\nconst demoContents: Record<string, DemoContent> = {\n  'idig-demo': {\n    id: 'idig-demo',\n    title: 'i<em>DIG</em> Demo',\n    description: 'Interactive demonstration of i<em>DIG</em> capabilities including the movable menu system and core features.'\n  },\n  'idig-lens': {\n    id: 'idig-lens',\n    title: 'i<em>DIG</em> Lens Demo',\n    description: 'Universal bookmarking, highlighting, microlinking and web reader. Take snapshots of full pages, generate customized AI summaries, share microlinks to serve as breadcrumbs for discovery. Tag and filter content stored on local devices.',\n    features: ['Status: Chrome extension in alpha testing.'],\n    videoUrl: 'https://f004.backblazeb2.com/file/idigdemo/idig_demo_final.mp4'\n  },\n  'idig-feeds': {\n    id: 'idig-feeds',\n    title: 'i<em>DIG</em> Feeds Demo',\n    description: 'Bring information into iDIG Lens through imports, RSS Feeds, and API calls.\\n\\nOrganize ingested content into filterable cards for tunable discovery. Use cases include ingesting news, statistical data, resumes, job descriptions, contact info, affiliate products/services, research documents, etc.\\n\\nDiscover and organize insights across diverse information streams, applying tags, search, highlights, and microlinks for deeper navigation.\\n\\nAll information remains in local or private storage, ensuring sovereignty over what is discovered and shared.',\n    features: ['Status: In early development (with Desktop & Web App)']\n  },\n  'idig-matching': {\n    id: 'idig-matching',\n    title: 'i<em>DIG</em> Matching Demo',\n    description: 'Match and mashup information from cards in Lens from iDIG Feeds to surface relationships that may otherwise remain hidden. Use cases include matching resumes to job descriptions, social worker profiles to individuals in need, or data to emerging trends.\\n\\nAccelerate decision-making by surfacing the strongest alignments across diverse inputs. Reduce noise by tuning matches to their specific context and goals.\\n\\nAll matches remain stored in local or private environments, protecting sensitive information.',\n    features: ['Status: Next in development after iDIG Feeds']\n  },\n  'idig-attractor': {\n    id: 'idig-attractor',\n    title: 'i<em>DIG</em> Attractor Demo',\n    description: 'Currently in alpha development as an experiment in shaping the flow of discovery. Filter and refine feeds through both AI summaries and adaptive UI layouts that surface resonance across diverse inputs.\\n\\nUse cases include aligning resumes with job descriptions, connecting social worker profiles to needs, tuning research and news flows, or discovering books, movies, and sports that resonate.\\n\\nThe design draws on ideas from Quantum Social Sciences, exploring how entangled patterns might guide collective insight.\\n\\nAll attractor settings remain in local or private storage, ensuring sovereignty over what is discovered and shared.',\n    features: ['Status: Next in development after iDIG Matching']\n  },\n  'idig-scenes': {\n    id: 'idig-scenes',\n    title: 'i<em>DIG</em> Scenes Demo',\n    description: 'Create immersive, contextual environments around your ideas. Organize related content, conversations, and insights into rich, explorable scenes.',\n    features: ['Create idea environments', 'Organize related content', 'Build contextual scenes', 'Explore connections visually']\n  }\n};\n\nexport default function Home() {\n  const [selectedDemo, setSelectedDemo] = useState<string>('idig-lens');\n  const [showVideoModal, setShowVideoModal] = useState(false);\n  const currentDemo = demoContents[selectedDemo];\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <main className=\"pt-10\">\n        <section className=\"min-h-screen flex flex-col justify-center\">\n          <div className=\"max-w-4xl mx-auto px-6 text-center\">\n            \n            {/* About iDIG Card */}\n            <div className=\"bg-white rounded-2xl px-12 pt-6 pb-12 shadow-lg border border-gray-200 mb-8\">\n              <div className=\"text-center\">\n                <h2 className=\"text-4xl md:text-5xl font-light mb-6\">About i<em>DIG</em></h2>\n                <p className=\"text-xl text-gray-600 max-w-2xl mx-auto mb-6\">\n                  i<em>DIG</em> (Deep Inquiry Generator) is a framework and community in development designed to amplify human curiosity through the use of tools to encourage deep and contextual insights into the information we engage with. \n                </p>\n                <Link href=\"/about\" className=\"inline-flex items-center text-blue-500 hover:text-blue-600 transition-colors font-medium\">\n                  More\n                  <svg className=\"w-4 h-4 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                  </svg>\n                </Link>\n              </div>\n            </div>\n\n            {/* Demo Player */}\n            <div className=\"mb-8\" data-testid=\"demo-section\">\n              \n              {/* Main Demo Player */}\n              <div className=\"bg-white rounded-2xl px-12 pt-6 pb-12 shadow-lg border border-gray-200 mb-8 h-[28rem]\">\n                <div className=\"text-center h-full flex flex-col\">\n                  <div className=\"mb-2\">\n                    <h4 className=\"text-4xl md:text-5xl font-light mb-4\">\n                      {selectedDemo === 'idig-lens' && <>i<em>DIG</em> Lens</>}\n                      {selectedDemo === 'idig-feeds' && <>i<em>DIG</em> Feeds</>}\n                      {selectedDemo === 'idig-matching' && <>i<em>DIG</em> Matching</>}\n                      {selectedDemo === 'idig-attractor' && <>i<em>DIG</em> Attractor</>}\n                      {selectedDemo === 'idig-scenes' && <>i<em>DIG</em> Scenes</>}\n                      {selectedDemo === 'idig-demo' && <>i<em>DIG</em></>}\n                    </h4>\n                    {selectedDemo !== 'idig-feeds' && selectedDemo !== 'idig-matching' && selectedDemo !== 'idig-attractor' && (\n                      <img \n                        src=\"/attached_assets/image_1756278431066.png\" \n                        alt=\"i<em>DIG</em> Interface\"\n                        className=\"w-full max-w-2xl h-auto rounded-lg shadow-lg mx-auto\"\n                      />\n                    )}\n                  </div>\n\n                  <div className=\"text-gray-600 mb-4 max-w-2xl mx-auto\">\n                    {selectedDemo === 'idig-feeds' ? (\n                      <div className=\"space-y-4\">\n                        <p>Bring information into iDIG Lens through imports, RSS Feeds, and API calls.</p>\n                        <p>Organize ingested content into filterable cards for tunable discovery.</p>\n                        <p>Use cases include ingesting news, statistical data, resumes, job descriptions, contact info, affiliate products/services, research documents, etc.</p>\n                        <p>Discover and organize insights across diverse information streams, applying tags, search, highlights, and microlinks for deeper navigation.</p>\n                        <p>All information remains in local or private storage, ensuring sovereignty over what is discovered and shared.</p>\n                      </div>\n                    ) : selectedDemo === 'idig-matching' ? (\n                      <div className=\"space-y-4\">\n                        <p>Match and mashup information from cards in Lens from iDIG Feeds to surface relationships that may otherwise remain hidden.</p>\n                        <p>Use cases include matching resumes to job descriptions, social worker profiles to individuals in need, or data to emerging trends.</p>\n                        <p>Accelerate decision-making by surfacing the strongest alignments across diverse inputs. Reduce noise by tuning matches to their specific context and goals.</p>\n                        <p>All matches remain stored in local or private environments, protecting sensitive information.</p>\n                      </div>\n                    ) : selectedDemo === 'idig-attractor' ? (\n                      <div className=\"space-y-4\">\n                        <p>Currently in alpha development as an experiment in shaping the flow of discovery. Filter and refine feeds through both AI summaries and adaptive UI layouts that surface resonance across diverse inputs.</p>\n                        <p>Use cases include aligning resumes with job descriptions, connecting social worker profiles to needs, tuning research and news flows, or discovering books, movies, and sports that resonate.</p>\n                        <p>The design draws on ideas from Quantum Social Sciences, exploring how entangled patterns might guide collective insight.</p>\n                        <p>All attractor settings remain in local or private storage, ensuring sovereignty over what is discovered and shared.</p>\n                      </div>\n                    ) : (\n                      <p>{currentDemo.description}</p>\n                    )}\n                  </div>\n                  {currentDemo.features && (\n                    <div className=\"mb-6 text-center\">\n                      <div className=\"text-gray-600 text-sm max-w-2xl mx-auto\">\n                        {currentDemo.features.map((feature, index) => (\n                          <div key={index} className=\"text-center\">\n                            {feature}\n                          </div>\n                        ))}\n                      </div>\n                      {selectedDemo === 'idig-lens' && currentDemo.videoUrl && (\n                        <div className=\"mt-4\">\n                          <Button \n                            onClick={() => setShowVideoModal(true)}\n                            className=\"apple-button px-6 py-2 text-sm font-medium\" \n                            data-testid=\"button-watch-demo\"\n                          >\n                            Watch Demo\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Demo Selector Carousel */}\n              <div className=\"flex items-center gap-4\">\n                {/* Left Arrow */}\n                <button \n                  onClick={() => {\n                    const carousel = document.getElementById('demo-carousel');\n                    if (carousel) {\n                      carousel.scrollBy({ left: -280, behavior: 'smooth' });\n                    }\n                  }}\n                  className=\"flex-shrink-0 w-10 h-10 bg-white rounded-full shadow-md hover:shadow-lg flex items-center justify-center transition-all duration-200 apple-button\"\n                >\n                  <svg className=\"w-5 h-5 text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n                  </svg>\n                </button>\n\n                {/* Carousel Container */}\n                <div className=\"flex gap-4 overflow-x-auto pb-4 scrollbar-hide flex-1\" id=\"demo-carousel\">\n                {/* iDIG Lens Card */}\n                <div \n                  onClick={() => setSelectedDemo('idig-lens')}\n                  className={`flex-shrink-0 w-64 cursor-pointer rounded-xl overflow-hidden shadow-md hover:shadow-lg transition-all duration-300 apple-button border-2 bg-white ${\n                    selectedDemo === 'idig-lens' ? 'border-blue-500' : 'border-gray-200 hover:border-blue-300'\n                  }`}\n                >\n                  <div className=\"p-6 h-32 flex flex-col justify-between\">\n                    <div>\n                      <h5 className=\"text-lg font-semibold mb-2 text-gray-800\">i<em>DIG</em> Lens</h5>\n                      <p className=\"text-xs text-gray-600 line-clamp-2\">\n                        Highlight, save, and explore insights\n                      </p>\n                    </div>\n                    <div className=\"flex items-center text-xs font-medium text-blue-600\">\n                      <svg className=\"w-3 h-3 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h1m4 0h1\" />\n                      </svg>\n                      <span>Active</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* iDIG Feeds Card */}\n                <div \n                  onClick={() => setSelectedDemo('idig-feeds')}\n                  className={`flex-shrink-0 w-64 cursor-pointer rounded-xl overflow-hidden shadow-md hover:shadow-lg transition-all duration-300 apple-button border-2 bg-white ${\n                    selectedDemo === 'idig-feeds' ? 'border-green-500' : 'border-gray-200 hover:border-green-300'\n                  }`}\n                >\n                  <div className=\"p-6 h-32 flex flex-col justify-between\">\n                    <div>\n                      <h5 className=\"text-lg font-semibold mb-2 text-gray-800\">i<em>DIG</em> Feeds</h5>\n                      <p className=\"text-xs text-gray-600 line-clamp-2\">\n                        Turn searches into discovery engines\n                      </p>\n                    </div>\n                    <div className=\"flex items-center text-xs font-medium text-green-600\">\n                      <svg className=\"w-3 h-3 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 10h16M4 14h16M4 18h16\" />\n                      </svg>\n                      <span>Select</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* iDIG Matching Card */}\n                <div \n                  onClick={() => setSelectedDemo('idig-matching')}\n                  className={`flex-shrink-0 w-64 cursor-pointer rounded-xl overflow-hidden shadow-md hover:shadow-lg transition-all duration-300 apple-button border-2 bg-white ${\n                    selectedDemo === 'idig-matching' ? 'border-orange-500' : 'border-gray-200 hover:border-orange-300'\n                  }`}\n                >\n                  <div className=\"p-6 h-32 flex flex-col justify-between\">\n                    <div>\n                      <h5 className=\"text-lg font-semibold mb-2 text-gray-800\">i<em>DIG</em> Matching</h5>\n                      <p className=\"text-xs text-gray-600 line-clamp-2\">\n                        AI-powered skill and experience matching\n                      </p>\n                    </div>\n                    <div className=\"flex items-center text-xs font-medium text-orange-600\">\n                      <svg className=\"w-3 h-3 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4\" />\n                      </svg>\n                      <span>Select</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* iDIG Attractor Card */}\n                <div \n                  onClick={() => setSelectedDemo('idig-attractor')}\n                  className={`flex-shrink-0 w-64 cursor-pointer rounded-xl overflow-hidden shadow-md hover:shadow-lg transition-all duration-300 apple-button border-2 bg-white ${\n                    selectedDemo === 'idig-attractor' ? 'border-purple-500' : 'border-gray-200 hover:border-purple-300'\n                  }`}\n                >\n                  <div className=\"p-6 h-32 flex flex-col justify-between\">\n                    <div>\n                      <h5 className=\"text-lg font-semibold mb-2 text-gray-800\">i<em>DIG</em> Attractor</h5>\n                      <p className=\"text-xs text-gray-600 line-clamp-2\">\n                        Shape discovery flow with adaptive AI\n                      </p>\n                    </div>\n                    <div className=\"flex items-center text-xs font-medium text-purple-600\">\n                      <svg className=\"w-3 h-3 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n                      </svg>\n                      <span>Select</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* iDIG Scenes Card */}\n                <div \n                  onClick={() => setSelectedDemo('idig-scenes')}\n                  className={`flex-shrink-0 w-64 cursor-pointer rounded-xl overflow-hidden shadow-md hover:shadow-lg transition-all duration-300 apple-button border-2 bg-white ${\n                    selectedDemo === 'idig-scenes' ? 'border-indigo-500' : 'border-gray-200 hover:border-indigo-300'\n                  }`}\n                >\n                  <div className=\"p-6 h-32 flex flex-col justify-between\">\n                    <div>\n                      <h5 className=\"text-lg font-semibold mb-2 text-gray-800\">i<em>DIG</em> Scenes</h5>\n                      <p className=\"text-xs text-gray-600 line-clamp-2\">\n                        Curate rich experiences around ideas\n                      </p>\n                    </div>\n                    <div className=\"flex items-center text-xs font-medium text-indigo-600\">\n                      <svg className=\"w-3 h-3 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\" />\n                      </svg>\n                      <span>Select</span>\n                    </div>\n                  </div>\n                </div>\n                </div>\n\n                {/* Right Arrow */}\n                <button \n                  onClick={() => {\n                    const carousel = document.getElementById('demo-carousel');\n                    if (carousel) {\n                      carousel.scrollBy({ left: 280, behavior: 'smooth' });\n                    }\n                  }}\n                  className=\"flex-shrink-0 w-10 h-10 bg-white rounded-full shadow-md hover:shadow-lg flex items-center justify-center transition-all duration-200 apple-button\"\n                >\n                  <svg className=\"w-5 h-5 text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                  </svg>\n                </button>\n              </div>\n            </div>\n\n          </div>\n        </section>\n\n        {/* About Preview Section */}\n        <section className=\"pt-8 pb-20\">\n          <div className=\"max-w-4xl mx-auto px-6\">\n\n            <div className=\"grid md:grid-cols-2 gap-12 mb-16\">\n              <div className=\"bg-white rounded-2xl p-8 shadow-lg border border-gray-200\">\n                <h3 className=\"text-2xl font-medium mb-4\">i<em>DIG</em> Principles</h3>\n                <ul className=\"text-gray-600 leading-relaxed space-y-3\">\n                  <li>• Local storage or private storage for what is consumed, created or shared</li>\n                  <li>• No cookies to track or share activity</li>\n                  <li>• No 3rd party ad networks</li>\n                  <li>• No passive popups</li>\n                  <li>• User Interface to encourage resonant and deep discovery through the use of highlighting, microlinks, filtering, and resonant sharing</li>\n                  <li>• AI summaries controlled by the user</li>\n                </ul>\n              </div>\n              \n              <div className=\"bg-white rounded-2xl p-8 shadow-lg border border-gray-200\">\n                <h3 className=\"text-2xl font-medium mb-4\">The i<em>DIG</em> Vision</h3>\n                <div className=\"text-gray-600 leading-relaxed space-y-3\">\n                  <p>To work toward building resonance in the connection by creating tools to align opportunities, resources, and information with those deep within communities.</p>\n                  <p>To inspire builders to create their own frameworks or collaborate with i<em>DIG</em> to add more resonance into the connection.</p>\n                  <p>To build tools for positive social and community impact.</p>\n                  <p>To build tools to encourage deep inquiry and purposeful engagement.</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Newsletter Signup */}\n            <NewsletterSignup />\n          </div>\n        </section>\n\n        {/* Blog Preview Section */}\n        <section className=\"pb-16\">\n          <div className=\"max-w-4xl mx-auto px-6\">\n            <div className=\"bg-white rounded-2xl px-12 pt-6 pb-12 shadow-lg border border-gray-200\">\n              <div className=\"text-center\">\n                <h2 className=\"text-4xl md:text-5xl font-light mb-6\">The Resonant Builders Blog</h2>\n                <p className=\"text-xl text-gray-600 max-w-2xl mx-auto mb-6\">\n                  Insights, reflections, and deep explorations into building tools that serve human curiosity and foster meaningful digital experiences.\n                </p>\n                <Link href=\"/blog\" className=\"inline-flex items-center text-blue-500 hover:text-blue-600 transition-colors font-medium mb-8\">\n                  Explore the Blog\n                  <svg className=\"w-4 h-4 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                  </svg>\n                </Link>\n                \n                {/* Blog Subscription */}\n                <div className=\"max-w-md mx-auto\">\n                  <BlogSignup />\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Book Preview Section */}\n        <section className=\"pb-20\">\n          <div className=\"max-w-4xl mx-auto px-6\">\n            <div className=\"bg-white rounded-2xl px-12 pt-6 pb-12 shadow-lg border border-gray-200\">\n              <div className=\"text-center\">\n                <h2 className=\"text-4xl md:text-5xl font-light mb-6\">We the Resonant Builders</h2>\n                <p className=\"text-xl text-gray-600 max-w-2xl mx-auto mb-6\">\n                  A book inviting resonant builders to create tools and systems to encourage human curiosity and foster meaningful engagement.\n                </p>\n                <p className=\"text-lg text-gray-500 mb-6\">Coming Soon</p>\n                <Link href=\"/book\" className=\"inline-flex items-center text-blue-500 hover:text-blue-600 transition-colors font-medium\">\n                  Learn more\n                  <svg className=\"w-4 h-4 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                  </svg>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-800 text-white py-8\">\n        <div className=\"max-w-6xl mx-auto px-6\">\n          <div className=\"text-center\">\n            <div className=\"text-xl font-medium mb-4 text-blue-400\">\n              iDIG.io\n            </div>\n            <p className=\"text-gray-400 text-sm\">\n              Resonant Tools for Curious Minds\n            </p>\n          </div>\n        </div>\n      </footer>\n\n      {/* Video Modal */}\n      {showVideoModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\" onClick={() => setShowVideoModal(false)}>\n          <div className=\"bg-white rounded-lg p-6 max-w-4xl w-full mx-4 relative\" onClick={(e) => e.stopPropagation()}>\n            <button \n              onClick={() => setShowVideoModal(false)}\n              className=\"absolute top-4 right-4 text-gray-500 hover:text-gray-700 text-2xl font-bold\"\n            >\n              ×\n            </button>\n            <div className=\"aspect-video\">\n              <video \n                controls \n                className=\"w-full h-full rounded\"\n                autoPlay\n              >\n                <source src={currentDemo.videoUrl} type=\"video/mp4\" />\n                Your browser does not support the video tag.\n              </video>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":25120},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/Newsletter.tsx":{"content":"import Navigation from \"@/components/Navigation\";\nimport { Link } from \"wouter\";\nimport NewsletterSignup from \"@/components/NewsletterSignup\";\n\nexport default function Newsletter() {\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navigation />\n      \n      <main className=\"pt-10\">\n        <section className=\"pt-0 pb-8\">\n          <div className=\"max-w-4xl mx-auto px-6\">\n            <div className=\"bg-white rounded-2xl px-12 pt-6 pb-12 shadow-lg border border-gray-200 mb-8\">\n              <div className=\"text-center\">\n                <h1 className=\"text-3xl md:text-4xl font-light mb-6\">The Resonant Builders Monthly</h1>\n                <p className=\"text-xl text-gray-600 max-w-2xl mx-auto mb-6\">\n                  Join our community of builders creating tools that amplify human curiosity and foster meaningful engagement with digital content.\n                </p>\n                <Link href=\"/#demo-section\" className=\"inline-flex items-center text-blue-500 hover:text-blue-600 transition-colors font-medium mb-4\">\n                  Watch the i<em>DIG</em> Demo\n                  <svg className=\"w-4 h-4 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                  </svg>\n                </Link>\n              </div>\n            </div>\n\n            {/* Newsletter Preview */}\n            <div className=\"mb-10\">\n              <div className=\"bg-white rounded-2xl p-8 shadow-lg border border-gray-200 h-96 flex flex-col\">\n                <div className=\"mb-6\">\n                  <span className=\"text-sm text-blue-500 font-medium\">Monthly Newsletter</span>\n                  <span className=\"text-gray-400 mx-2\">•</span>\n                  <span className=\"text-sm text-gray-500\">Issue #1 Coming Soon</span>\n                  <span className=\"text-gray-400 mx-2\">•</span>\n                  <span className=\"text-sm text-gray-500\">By Paul Duplantis</span>\n                </div>\n                <h3 \n                  className=\"text-3xl font-medium mb-6 hover:text-blue-600 transition-colors cursor-pointer\"\n                  data-testid=\"link-newsletter-issue-title\"\n                  onClick={() => window.location.href = '/newsletter/issue-1'}\n                >\n                  The Resonant Builders Monthly - Issue #1\n                </h3>\n                <div className=\"text-gray-700 leading-relaxed space-y-4 flex-1 overflow-hidden\">\n                  <p>Welcome to The Resonant Builders Monthly, a newsletter dedicated to exploring how we can build tools that serve human curiosity and foster meaningful digital experiences.</p>\n                  \n                  <p>Each month, we'll feature insights from builders who are creating tools with intention - tools that prioritize user agency, privacy, and genuine value over engagement metrics and data extraction.</p>\n                  \n                  <p>In our inaugural issue, we'll explore the principles behind resonant tool building, share stories from early community members, and provide a deep dive into the i<em>DIG</em> framework development process.</p>\n                  \n                  <p>You'll also discover other projects and builders in our community who are working to create a web more aligned with human flourishing than corporate extraction.</p>\n                  \n                  <p>This isn't just another tech newsletter - it's a conversation starter about what becomes possible when we build for the health of connections rather than the wealth extracted from them.</p>\n                </div>\n                <div className=\"mt-auto pt-4 border-t border-gray-200\">\n                  <button \n                    onClick={() => window.location.href = '/newsletter/issue-1'}\n                    className=\"inline-flex items-center text-blue-500 hover:text-blue-600 transition-colors font-medium\"\n                    data-testid=\"button-read-full-newsletter\"\n                  >\n                    Read Full Newsletter\n                    <svg className=\"w-4 h-4 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                    </svg>\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            {/* Newsletter Subscription */}\n            <div className=\"bg-white rounded-2xl px-12 pt-6 pb-12 shadow-lg border border-gray-200\">\n              <div className=\"text-center mb-8\">\n                <h2 className=\"text-3xl font-light mb-4\">Subscribe to the Monthly Newsletter</h2>\n                <p className=\"text-gray-600 mb-6\">\n                  Receive The Resonant Builders Monthly with curated insights, community spotlights, and updates from the resonant building community.\n                </p>\n              </div>\n              \n              <NewsletterSignup />\n              \n              <div className=\"mt-6 text-center\">\n                <p className=\"text-sm text-gray-500 mb-2\">\n                  Looking for blog post notifications instead?\n                </p>\n                <Link href=\"/blog\" className=\"inline-flex items-center text-blue-500 hover:text-blue-600 transition-colors font-medium text-sm\">\n                  Subscribe to Blog Updates\n                  <svg className=\"w-4 h-4 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                  </svg>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-800 text-white py-8\">\n        <div className=\"max-w-6xl mx-auto px-6\">\n          <div className=\"text-center\">\n            <div className=\"text-xl font-medium mb-4 text-blue-400\">\n              i<em>DIG</em>.io\n            </div>\n            <p className=\"text-gray-400 text-sm\">\n              Resonant Tools for Curious Minds\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":6190},"email-templates/README.md":{"content":"# Email Newsletter Template\n\nThis folder contains email-safe HTML templates for The Resonant Builders Monthly newsletter.\n\n## How to Use\n\n1. **Open the template file**: `newsletter-template.html`\n2. **Edit the content**: Replace placeholder content with your actual newsletter content\n3. **Update placeholders**: Replace these placeholders with actual links:\n   - `[DATE]` - Current date\n   - `[YOUR_EMAIL]` - Your contact email\n   - `[BLOG_LINK]` - Link to your blog\n   - `[WEBSITE_LINK]` - Link to idig.io\n   - `[ABOUT_LINK]` - Link to about page\n   - `[UNSUBSCRIBE_LINK]` - Unsubscribe link\n   - `[PREFERENCES_LINK]` - Email preferences link\n\n4. **Copy and paste**: Copy the entire HTML content and paste it into your email client\n\n## Email Client Compatibility\n\nThis template is designed to work with:\n- Gmail\n- Outlook (desktop and web)\n- Apple Mail\n- Thunderbird\n- Most other major email clients\n\n## Features\n\n- **Responsive design** - Works on mobile and desktop\n- **Clean styling** - Matches your website's Apple-inspired design\n- **Email-safe CSS** - Uses techniques that work across email clients\n- **Proper structure** - Header, content sections, and footer\n- **Branded design** - Includes your iDIG logo and color scheme\n\n## Customization Tips\n\n- Keep images to a minimum (email clients often block them)\n- Test in multiple email clients before sending\n- Always include plain text version as backup\n- Keep content concise and scannable\n- Use bullet points and short paragraphs\n\n## Content Sections Included\n\n1. **Header** - Logo and newsletter title\n2. **Welcome** - Introduction and what to expect\n3. **Featured Article** - Main content piece\n4. **Builder Spotlight** - Community feature\n5. **iDIG Updates** - Product development news\n6. **Resources** - Curated reading list\n7. **Call to Action** - Community engagement\n8. **Footer** - Links and unsubscribe options","size_bytes":1878},"client/src/components/BlogSignup.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function BlogSignup() {\n  const [email, setEmail] = useState(\"\");\n  const { toast } = useToast();\n\n  const blogMutation = useMutation({\n    mutationFn: async (email: string) => {\n      return apiRequest(\"POST\", \"/api/blog-subscription\", { email });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success!\",\n        description: \"You've been subscribed to blog post notifications.\",\n      });\n      setEmail(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Subscription failed\",\n        description: error.message || \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (email) {\n      blogMutation.mutate(email);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"flex gap-2\">\n        <input\n          type=\"email\"\n          placeholder=\"Enter your email for blog updates\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          className=\"flex-1 px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          required\n          disabled={blogMutation.isPending}\n          data-testid=\"input-blog-email\"\n        />\n        <Button\n          type=\"submit\"\n          className=\"apple-button px-6 py-3 font-medium\"\n          disabled={blogMutation.isPending}\n          data-testid=\"button-blog-submit\"\n        >\n          {blogMutation.isPending ? \"Subscribing...\" : \"Subscribe\"}\n        </Button>\n      </div>\n    </form>\n  );\n}","size_bytes":1870},"client/src/pages/Admin.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/Navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download, Copy, Users, Mail, Lock } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Newsletter, BlogSubscription } from \"@shared/schema\";\n\ninterface Subscriber {\n  id: string;\n  email: string;\n  name?: string;\n  createdAt: Date;\n}\n\nexport default function Admin() {\n  const [activeTab, setActiveTab] = useState<'newsletter' | 'blog'>('newsletter');\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [password, setPassword] = useState(\"\");\n  const { toast } = useToast();\n\n  // Simple password protection - you can change this password\n  const ADMIN_PASSWORD = \"resonant2024\";\n\n  useEffect(() => {\n    // Check if already authenticated in this session\n    const authenticated = sessionStorage.getItem('admin_authenticated');\n    if (authenticated === 'true') {\n      setIsAuthenticated(true);\n    }\n  }, []);\n\n  // Always call hooks - but only enable queries when authenticated\n  const newsletterQuery = useQuery<Newsletter[]>({\n    queryKey: ['/api/admin/newsletter-subscribers'],\n    enabled: isAuthenticated && activeTab === 'newsletter'\n  });\n\n  const blogQuery = useQuery<BlogSubscription[]>({\n    queryKey: ['/api/admin/blog-subscribers'],\n    enabled: isAuthenticated && activeTab === 'blog'\n  });\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (password === ADMIN_PASSWORD) {\n      setIsAuthenticated(true);\n      sessionStorage.setItem('admin_authenticated', 'true');\n      toast({\n        title: \"Access granted\",\n        description: \"Welcome to the admin panel.\",\n      });\n    } else {\n      toast({\n        title: \"Access denied\",\n        description: \"Incorrect password. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Show login form if not authenticated\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-white\">\n        <Navigation />\n        \n        <main className=\"pt-20\">\n          <section className=\"py-20\">\n            <div className=\"max-w-md mx-auto px-6\">\n              <div className=\"bg-white rounded-2xl px-12 pt-6 pb-12 shadow-lg border border-gray-200\">\n                <div className=\"text-center mb-8\">\n                  <Lock className=\"w-12 h-12 mx-auto mb-4 text-gray-400\" />\n                  <h1 className=\"text-3xl font-light mb-4\">Admin Access</h1>\n                  <p className=\"text-gray-600\">\n                    Enter the admin password to manage subscribers\n                  </p>\n                </div>\n\n                <form onSubmit={handleLogin} className=\"space-y-4\">\n                  <input\n                    type=\"password\"\n                    placeholder=\"Admin password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    required\n                    data-testid=\"input-admin-password\"\n                  />\n                  <Button\n                    type=\"submit\"\n                    className=\"apple-button w-full py-3 font-medium\"\n                    data-testid=\"button-admin-login\"\n                  >\n                    Access Admin Panel\n                  </Button>\n                </form>\n\n                <div className=\"mt-6 p-4 bg-yellow-50 rounded-lg border border-yellow-200\">\n                  <p className=\"text-sm text-yellow-800\">\n                    <strong>Security Note:</strong> The current password is \"resonant2024\". \n                    You can change this in the Admin.tsx file.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </section>\n        </main>\n      </div>\n    );\n  }\n\n  const currentData = activeTab === 'newsletter' ? newsletterQuery.data : blogQuery.data;\n  const isLoading = activeTab === 'newsletter' ? newsletterQuery.isLoading : blogQuery.isLoading;\n\n  const copyEmailList = () => {\n    if (!currentData?.length) return;\n    \n    const emailList = currentData.map((sub: Newsletter | BlogSubscription) => sub.email).join('\\n');\n    navigator.clipboard.writeText(emailList).then(() => {\n      toast({\n        title: \"Emails copied!\",\n        description: `${currentData.length} email addresses copied to clipboard.`,\n      });\n    });\n  };\n\n  const downloadEmailList = () => {\n    if (!currentData?.length) return;\n    \n    const csvContent = [\n      'Email,Subscribed Date',\n      ...currentData.map((sub: Newsletter | BlogSubscription) => `${sub.email},${new Date(sub.createdAt).toLocaleDateString()}`)\n    ].join('\\n');\n    \n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `${activeTab}-subscribers-${new Date().toISOString().split('T')[0]}.csv`;\n    link.click();\n    window.URL.revokeObjectURL(url);\n    \n    toast({\n      title: \"Download started!\",\n      description: `${activeTab} subscriber list downloaded as CSV.`,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navigation />\n      \n      <main className=\"pt-20\">\n        <section className=\"py-20\">\n          <div className=\"max-w-6xl mx-auto px-6\">\n            <div className=\"bg-white rounded-2xl px-12 pt-6 pb-12 shadow-lg border border-gray-200\">\n              <div className=\"text-center mb-8\">\n                <h1 className=\"text-4xl md:text-5xl font-light mb-4\">Subscriber Management</h1>\n                <p className=\"text-xl text-gray-600\">\n                  View and export your newsletter and blog subscriber lists\n                </p>\n              </div>\n\n              {/* Tab Navigation */}\n              <div className=\"flex justify-center mb-8\">\n                <div className=\"bg-gray-100 rounded-lg p-1 flex\">\n                  <button\n                    onClick={() => setActiveTab('newsletter')}\n                    className={`px-6 py-2 rounded-md font-medium transition-colors ${\n                      activeTab === 'newsletter'\n                        ? 'bg-white text-blue-600 shadow-sm'\n                        : 'text-gray-600 hover:text-gray-800'\n                    }`}\n                    data-testid=\"tab-newsletter\"\n                  >\n                    <Users className=\"w-4 h-4 inline mr-2\" />\n                    Newsletter ({(newsletterQuery.data as Newsletter[])?.length || 0})\n                  </button>\n                  <button\n                    onClick={() => setActiveTab('blog')}\n                    className={`px-6 py-2 rounded-md font-medium transition-colors ${\n                      activeTab === 'blog'\n                        ? 'bg-white text-blue-600 shadow-sm'\n                        : 'text-gray-600 hover:text-gray-800'\n                    }`}\n                    data-testid=\"tab-blog\"\n                  >\n                    <Mail className=\"w-4 h-4 inline mr-2\" />\n                    Blog Updates ({(blogQuery.data as BlogSubscription[])?.length || 0})\n                  </button>\n                </div>\n              </div>\n\n              {/* Email Templates */}\n              <div className=\"bg-blue-50 rounded-lg p-6 mb-8 border border-blue-200\">\n                <h3 className=\"text-lg font-semibold mb-4 text-blue-900\">Email Templates</h3>\n                <p className=\"text-sm text-blue-800 mb-4\">\n                  Access your HTML email templates for copy-paste into your email client:\n                </p>\n                <div className=\"flex flex-wrap gap-3\">\n                  <button\n                    onClick={() => window.open(`${window.location.origin}/email-templates/monthly-newsletter-template.html`, '_blank')}\n                    className=\"inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium\"\n                    data-testid=\"button-monthly-template\"\n                  >\n                    Monthly Newsletter Template\n                  </button>\n                  <button\n                    onClick={() => window.open(`${window.location.origin}/email-templates/blog-notification-template.html`, '_blank')}\n                    className=\"inline-flex items-center px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-sm font-medium\"\n                    data-testid=\"button-blog-template\"\n                  >\n                    Blog Notification Template\n                  </button>\n                </div>\n                <p className=\"text-xs text-blue-700 mt-3\">\n                  Templates open in new tabs. Copy the HTML source and customize with your content before sending.\n                </p>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex justify-center gap-4 mb-8\">\n                <Button\n                  onClick={copyEmailList}\n                  disabled={!currentData?.length || isLoading}\n                  className=\"apple-button px-6 py-3 font-medium\"\n                  data-testid=\"button-copy-emails\"\n                >\n                  <Copy className=\"w-4 h-4 mr-2\" />\n                  Copy Email List\n                </Button>\n                <Button\n                  onClick={downloadEmailList}\n                  disabled={!currentData?.length || isLoading}\n                  className=\"apple-button px-6 py-3 font-medium\"\n                  data-testid=\"button-download-csv\"\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Download CSV\n                </Button>\n              </div>\n\n              {/* Subscriber List */}\n              <div className=\"bg-gray-50 rounded-lg p-6\">\n                {isLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n                    <p className=\"mt-2 text-gray-600\">Loading subscribers...</p>\n                  </div>\n                ) : !currentData?.length ? (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-gray-600\">\n                      No {activeTab === 'newsletter' ? 'newsletter' : 'blog'} subscribers yet.\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <div className=\"mb-4\">\n                      <h3 className=\"text-lg font-medium mb-2\">\n                        {activeTab === 'newsletter' ? 'Newsletter' : 'Blog Update'} Subscribers\n                      </h3>\n                      <p className=\"text-sm text-gray-600\">\n                        Total: {currentData.length} subscribers\n                      </p>\n                    </div>\n                    \n                    <div className=\"max-h-96 overflow-y-auto\">\n                      <div className=\"grid gap-2\">\n                        {currentData.map((subscriber: Newsletter | BlogSubscription, index: number) => (\n                          <div\n                            key={subscriber.id}\n                            className=\"bg-white p-3 rounded border flex justify-between items-center\"\n                            data-testid={`subscriber-${index}`}\n                          >\n                            <div>\n                              <div className=\"font-medium\">{subscriber.email}</div>\n                            </div>\n                            <div className=\"text-sm text-gray-500\">\n                              {new Date(subscriber.createdAt).toLocaleDateString()}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Usage Instructions */}\n              <div className=\"mt-8 bg-blue-50 rounded-lg p-6 border border-blue-200\">\n                <h3 className=\"font-medium mb-2 text-blue-800\">How to Use This Data</h3>\n                <div className=\"text-sm text-blue-700\">\n                  <p className=\"mb-2\">\n                    <strong>Copy Email List:</strong> Copies all email addresses to your clipboard, separated by line breaks. Perfect for pasting into your email client's BCC field.\n                  </p>\n                  <p>\n                    <strong>Download CSV:</strong> Downloads a spreadsheet file with email addresses, names (if provided), and subscription dates. Import this into your email service or keep as a backup.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-800 text-white py-16\">\n        <div className=\"max-w-6xl mx-auto px-6\">\n          <div className=\"text-center\">\n            <div className=\"text-xl font-medium mb-4\">\n              <span className=\"logo-i\">i</span>\n              <span className=\"logo-dig ml-1\">DIG</span>\n              <span className=\"logo-io\">.io</span>\n            </div>\n            <p className=\"text-gray-400 text-sm\">\n              Resonant Tools for Curious Minds\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":13510},"client/src/pages/Blog.tsx":{"content":"import Navigation from \"@/components/Navigation\";\nimport { Link, useLocation } from \"wouter\";\nimport BlogSignup from \"@/components/BlogSignup\";\n\nexport default function Blog() {\n  const [, navigate] = useLocation();\n\n  const handleBlogPostClick = () => {\n    navigate(\"/blog/introduction-to-idig\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navigation />\n      \n      <main className=\"pt-10\">\n        <section className=\"pt-0 pb-8\">\n          <div className=\"max-w-4xl mx-auto px-6\">\n            <div className=\"bg-white rounded-2xl px-12 pt-6 pb-12 shadow-lg border border-gray-200 mb-8\">\n              <div className=\"text-center\">\n                <h1 className=\"text-4xl md:text-5xl font-light mb-6\">The Resonant Builders Blog</h1>\n                <p className=\"text-xl text-gray-600 max-w-2xl mx-auto mb-6\">\n                  Insights, reflections, and deep explorations into building tools that serve human curiosity and foster meaningful digital experiences.\n                </p>\n                <Link href=\"/#demo-section\" className=\"inline-flex items-center text-blue-500 hover:text-blue-600 transition-colors font-medium mb-4\">\n                  Watch the i<em>DIG</em> Demo\n                  <svg className=\"w-4 h-4 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                  </svg>\n                </Link>\n              </div>\n            </div>\n\n            {/* Introduction to iDIG Blog Post */}\n            <div className=\"mb-10\">\n              <div className=\"bg-white rounded-2xl p-8 shadow-lg border border-gray-200 h-96 flex flex-col\">\n                <div className=\"mb-6\">\n                  <span className=\"text-sm text-blue-500 font-medium\">Introduction</span>\n                  <span className=\"text-gray-400 mx-2\">•</span>\n                  <span className=\"text-sm text-gray-500\">August 30, 2025</span>\n                  <span className=\"text-gray-400 mx-2\">•</span>\n                  <span className=\"text-sm text-gray-500\">By Paul Duplantis</span>\n                </div>\n                <h3 \n                  onClick={handleBlogPostClick}\n                  className=\"text-3xl font-medium mb-6 hover:text-blue-600 transition-colors cursor-pointer\"\n                  data-testid=\"link-blog-post-title\"\n                >\n                  Introduction to i<em>DIG</em>\n                </h3>\n                <div className=\"text-gray-700 leading-relaxed space-y-4 flex-1 overflow-hidden\">\n                  <p>I have to admit, I don't know what i<em>DIG</em> will become or if it will become anything of note for that matter. All I know is I needed to build it. Maybe just to prove to myself I could but also to possibly start a conversation around what role the individual has in the information they create, consume, and share. Should they be in the driver seat or merely the passengers? Should they be in control of their experiences or should these experiences become available to the highest bidder?</p>\n                  \n                  <p>I have lived long enough to watch the birth of the web founded on the principles of openness and collaboration evolve into a siloed web of influence we see today. Certainly much good has come from it but it would be hard to argue that people are in control.</p>\n                  \n                  <p>But what if they were in control and the resulting experiences were centered on providing agency and privacy? What if every element they engaged with was intended to spark curiosity and understanding of a subject to provide context and clarity in service of the quality of interactions rather than just the quantity of them.</p>\n                  \n                  <p>To me i<em>DIG</em> is an experiment to explore the possibilities of this intention to service quality over quantity. What I am launching today is what I am calling Phase I. This is in an Alpha test phase and is a very rough sketch of an idea I have been carrying for over 20 years.</p>\n                  \n                  <p>The rise of GenAI allowed me to manifest these ideas into reality as I am neither a coder nor a software developer. Not to say blood, sweat, and tears were not shed over the last year, as i<em>DIG</em> was built from scratch. I can say from experience that GenAI does not magically build solutions for you, especially at this level.</p>\n                  \n                  <p>But moving forward I don't see i<em>DIG</em> as a traditional company to own these ideas but more of a path to explore. Or if I do find traction, the only path I could see moving forward to maintain quality of experiences in scaling this framework would be to set up a worker co-op to provide resonant ownership of the framework to every person involved in the growth of it.</p>\n                  \n                  <p>But at the very least, maybe this effort inspires potential collaborators to work with me on seeing where this path will lead or maybe it inspires somebody to build something on their own to provide agency and privacy to people. It doesn't matter to me. I just want to be part of the conversation.</p>\n                  \n                  <p>In service of this conversation, I am also launching the i<em>DIG</em> blog which will feature ideas and updates on the i<em>DIG</em> framework journey as well as The Resonant Builders Monthly which will be a monthly newsletter to feature recent blog posts but more importantly feature what other builders are up to in service of building a web more in tune with people being in control of their experiences.</p>\n                  \n                  <p>I am also wrapping up a book on this journey titled We the Resonant Builders. Coming soon!</p>\n                  \n                  <p>I argue what is possible when more people start to build for the health of the connection more than the wealth extracted from it. This is the conversation I want to start.</p>\n                  \n                  <p>With i<em>DIG</em>, I personally want to explore new methodologies to surface opportunities for resonant alignment between people and information. I have been recently researching quantum social sciences theory and how this might help define what I call the i<em>DIG</em> attractor that is in development. I just think we are ready to evolve beyond traditional filtering for the way we discover information. I will be writing more about this in my next blog post!</p>\n                  \n                  <p>Again, I really don't know what i<em>DIG</em> is. I almost don't want to define it. Maybe it's part hobby and part obsession. All I know is I have built the foundation of it and am ready to explore where it can go. More importantly what I might uncover from what other people are building that could help mold this into something more than what I can imagine and possibly inspire others to build what they have not imagined.</p>\n                  \n                  <p>But the end goal is to build tools for people to harness their own potential and purpose, not in service of what is built but what resides within them. Tools to help people align resonantly with opportunities, resources for social services, news, or what interests them.</p>\n                  \n                  <p>This tool is not special. People are or can be special. This tool is to illuminate this potential, not influence it.</p>\n                </div>\n                <div className=\"mt-auto pt-4 border-t border-gray-200\">\n                  <button \n                    onClick={handleBlogPostClick}\n                    className=\"inline-flex items-center text-blue-500 hover:text-blue-600 transition-colors font-medium\"\n                    data-testid=\"button-read-full-post\"\n                  >\n                    Read Full Post\n                    <svg className=\"w-4 h-4 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                    </svg>\n                  </button>\n                </div>\n              </div>\n            </div>\n\n\n            {/* Blog Subscription */}\n            <div className=\"bg-white rounded-2xl px-12 pt-6 pb-12 shadow-lg border border-gray-200\">\n              <div className=\"text-center mb-8\">\n                <h2 className=\"text-3xl font-light mb-4\">Get Blog Updates</h2>\n                <p className=\"text-gray-600 mb-6\">\n                  Subscribe to receive notifications when we publish new blog posts and insights from the resonant building community.\n                </p>\n              </div>\n              \n              <BlogSignup />\n              \n              <div className=\"mt-6 text-center\">\n                <p className=\"text-sm text-gray-500 mb-2\">\n                  Looking for our monthly newsletter instead?\n                </p>\n                <Link href=\"/newsletter\" className=\"inline-flex items-center text-blue-500 hover:text-blue-600 transition-colors font-medium text-sm\">\n                  Subscribe to The Resonant Builders Monthly\n                  <svg className=\"w-4 h-4 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                  </svg>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-800 text-white py-8\">\n        <div className=\"max-w-6xl mx-auto px-6\">\n          <div className=\"text-center\">\n            <div className=\"text-xl font-medium mb-4 text-blue-400\">\n              iDIG.io\n            </div>\n            <p className=\"text-gray-400 text-sm\">\n              Resonant Tools for Curious Minds\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":9982},"client/src/pages/BlogSubscription.tsx":{"content":"import Navigation from \"@/components/Navigation\";\nimport BlogSignup from \"@/components/BlogSignup\";\nimport { Link } from \"wouter\";\n\nexport default function BlogSubscription() {\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navigation />\n      \n      <main className=\"pt-20\">\n        <section className=\"py-20\">\n          <div className=\"max-w-4xl mx-auto px-6\">\n            <div className=\"bg-white rounded-2xl px-12 pt-6 pb-12 shadow-lg border border-gray-200 mb-16\">\n              <div className=\"text-center\">\n                <h1 className=\"text-4xl md:text-5xl font-light mb-6\">Blog Post Notifications</h1>\n                <p className=\"text-xl text-gray-600 max-w-2xl mx-auto mb-8\">\n                  Get notified immediately when we publish new blog posts with deep explorations into resonant tool building and design philosophy.\n                </p>\n                \n                <div className=\"max-w-2xl mx-auto text-left mb-8\">\n                  <h2 className=\"text-2xl font-medium mb-4\">What You'll Receive</h2>\n                  <div className=\"grid md:grid-cols-2 gap-6 text-gray-600\">\n                    <div>\n                      <h3 className=\"font-medium mb-2\">Immediate Notifications</h3>\n                      <p className=\"text-sm\">Get notified as soon as we publish new blog posts.</p>\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium mb-2\">In-Depth Content</h3>\n                      <p className=\"text-sm\">Technical and philosophical deep dives into tool building.</p>\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium mb-2\">Case Studies</h3>\n                      <p className=\"text-sm\">Real-world implementation guides and lessons learned.</p>\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium mb-2\">Community Discussions</h3>\n                      <p className=\"text-sm\">Insights from the resonant builders community.</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Blog Signup */}\n            <div className=\"mb-16\">\n              <BlogSignup />\n            </div>\n\n            {/* Success Notice */}\n            <div className=\"bg-green-50 rounded-2xl p-8 border border-green-200 mb-16\">\n              <div className=\"text-center\">\n                <h2 className=\"text-2xl font-medium mb-4 text-green-800\">Thank You for Subscribing!</h2>\n                <p className=\"text-green-700 mb-4\">\n                  You'll receive notifications whenever we publish new blog posts. \n                  In the meantime, explore our existing content.\n                </p>\n                <div className=\"flex justify-center gap-4\">\n                  <Link href=\"/blog\" className=\"inline-flex items-center text-green-600 hover:text-green-700 transition-colors font-medium\">\n                    Read Our Blog\n                    <svg className=\"w-4 h-4 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                    </svg>\n                  </Link>\n                  <Link href=\"/about\" className=\"inline-flex items-center text-green-600 hover:text-green-700 transition-colors font-medium\">\n                    Learn About i<em>DIG</em>\n                    <svg className=\"w-4 h-4 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                    </svg>\n                  </Link>\n                </div>\n              </div>\n            </div>\n\n            {/* Alternative Options */}\n            <div className=\"bg-white rounded-2xl px-12 pt-6 pb-12 shadow-lg border border-gray-200\">\n              <div className=\"text-center\">\n                <h2 className=\"text-3xl font-light mb-4\">Prefer Monthly Summaries?</h2>\n                <p className=\"text-gray-600 mb-6\">\n                  Our monthly newsletter provides curated insights and community spotlights delivered once per month.\n                </p>\n                <Link href=\"/monthly-subscription\" className=\"inline-flex items-center text-blue-500 hover:text-blue-600 transition-colors font-medium\">\n                  Subscribe to Monthly Newsletter\n                  <svg className=\"w-4 h-4 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                  </svg>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-800 text-white py-8\">\n        <div className=\"max-w-6xl mx-auto px-6\">\n          <div className=\"text-center\">\n            <div className=\"text-xl font-medium mb-4 text-blue-400\">\n              iDIG.io\n            </div>\n            <p className=\"text-gray-400 text-sm\">\n              Resonant Tools for Curious Minds\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":5244},"client/src/pages/MonthlySubscription.tsx":{"content":"import Navigation from \"@/components/Navigation\";\nimport NewsletterSignup from \"@/components/NewsletterSignup\";\nimport { Link } from \"wouter\";\n\nexport default function MonthlySubscription() {\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navigation />\n      \n      <main className=\"pt-20\">\n        <section className=\"py-20\">\n          <div className=\"max-w-4xl mx-auto px-6\">\n            <div className=\"bg-white rounded-2xl px-12 pt-6 pb-12 shadow-lg border border-gray-200 mb-16\">\n              <div className=\"text-center\">\n                <h1 className=\"text-4xl md:text-5xl font-light mb-6\">The Resonant Builders Monthly</h1>\n                <p className=\"text-xl text-gray-600 max-w-2xl mx-auto mb-8\">\n                  Join our monthly newsletter featuring curated insights, community spotlights, and early access to i<em>DIG</em> features.\n                </p>\n                \n                <div className=\"max-w-2xl mx-auto text-left mb-8\">\n                  <h2 className=\"text-2xl font-medium mb-4\">What You'll Receive</h2>\n                  <div className=\"grid md:grid-cols-2 gap-6 text-gray-600\">\n                    <div>\n                      <h3 className=\"font-medium mb-2\">Builder Insights</h3>\n                      <p className=\"text-sm\">Deep dives into the principles and practices of resonant tool creation.</p>\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium mb-2\">Community Features</h3>\n                      <p className=\"text-sm\">Spotlights on builders creating tools that serve human curiosity.</p>\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium mb-2\">Design Philosophy</h3>\n                      <p className=\"text-sm\">Explorations of user agency, privacy-first design, and meaningful interaction.</p>\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium mb-2\">Early Access</h3>\n                      <p className=\"text-sm\">First looks at i<em>DIG</em> features and exclusive beta access opportunities.</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Newsletter Signup */}\n            <div className=\"mb-16\">\n              <NewsletterSignup />\n            </div>\n\n            {/* Success Notice */}\n            <div className=\"bg-green-50 rounded-2xl p-8 border border-green-200 mb-16\">\n              <div className=\"text-center\">\n                <h2 className=\"text-2xl font-medium mb-4 text-green-800\">Thank You for Subscribing!</h2>\n                <p className=\"text-green-700 mb-4\">\n                  You'll receive your first issue of The Resonant Builders Monthly soon. \n                  In the meantime, explore our other content.\n                </p>\n                <div className=\"flex justify-center gap-4\">\n                  <Link href=\"/blog\" className=\"inline-flex items-center text-green-600 hover:text-green-700 transition-colors font-medium\">\n                    Read Our Blog\n                    <svg className=\"w-4 h-4 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                    </svg>\n                  </Link>\n                  <Link href=\"/about\" className=\"inline-flex items-center text-green-600 hover:text-green-700 transition-colors font-medium\">\n                    Learn About i<em>DIG</em>\n                    <svg className=\"w-4 h-4 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                    </svg>\n                  </Link>\n                </div>\n              </div>\n            </div>\n\n            {/* Alternative Options */}\n            <div className=\"bg-white rounded-2xl px-12 pt-6 pb-12 shadow-lg border border-gray-200\">\n              <div className=\"text-center\">\n                <h2 className=\"text-3xl font-light mb-4\">Want More Frequent Updates?</h2>\n                <p className=\"text-gray-600 mb-6\">\n                  Consider subscribing to our blog notifications for immediate updates when we publish new content.\n                </p>\n                <Link href=\"/blog-subscription\" className=\"inline-flex items-center text-blue-500 hover:text-blue-600 transition-colors font-medium\">\n                  Subscribe to Blog Updates\n                  <svg className=\"w-4 h-4 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                  </svg>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-800 text-white py-8\">\n        <div className=\"max-w-6xl mx-auto px-6\">\n          <div className=\"text-center\">\n            <div className=\"text-xl font-medium mb-4 text-blue-400\">\n              iDIG.io\n            </div>\n            <p className=\"text-gray-400 text-sm\">\n              Resonant Tools for Curious Minds\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":5339},"client/src/pages/BlogPost.tsx":{"content":"import Navigation from \"@/components/Navigation\";\nimport { Link, useParams } from \"wouter\";\nimport { useState } from \"react\";\n\ninterface BlogPostData {\n  id: string;\n  title: string;\n  content: string[];\n  category: string;\n  date: string;\n  author: string;\n}\n\nconst blogPosts: Record<string, BlogPostData> = {\n  \"introduction-to-idig\": {\n    id: \"introduction-to-idig\",\n    title: \"Introduction to iDIG\",\n    category: \"Introduction\",\n    date: \"August 30, 2025\",\n    author: \"Paul Duplantis\",\n    content: [\n      \"I have to admit, I don't know what iDIG will become or if it will become anything of note for that matter. All I know is I needed to build it. Maybe just to prove to myself I could but also to possibly start a conversation around what role the individual has in the information they create, consume, and share. Should they be in the driver seat or merely the passengers? Should they be in control of their experiences or should these experiences become available to the highest bidder?\",\n      \"I have lived long enough to watch the birth of the web founded on the principles of openness and collaboration evolve into a siloed web of influence we see today. Certainly much good has come from it but it would be hard to argue that people are in control.\",\n      \"But what if they were in control and the resulting experiences were centered on providing agency and privacy? What if every element they engaged with was intended to spark curiosity and understanding of a subject to provide context and clarity in service of the quality of interactions rather than just the quantity of them.\",\n      \"To me iDIG is an experiment to explore the possibilities of this intention to service quality over quantity. What I am launching today is what I am calling Phase I. This is in an Alpha test phase and is a very rough sketch of an idea I have been carrying for over 20 years.\",\n      \"The rise of GenAI allowed me to manifest these ideas into reality as I am neither a coder nor a software developer. Not to say blood, sweat, and tears were not shed over the last year, as iDIG was built from scratch. I can say from experience that GenAI does not magically build solutions for you, especially at this level.\",\n      \"But moving forward I don't see iDIG as a traditional company to own these ideas but more of a path to explore. Or if I do find traction, the only path I could see moving forward to maintain quality of experiences in scaling this framework would be to set up a worker co-op to provide resonant ownership of the framework to every person involved in the growth of it.\",\n      \"But at the very least, maybe this effort inspires potential collaborators to work with me on seeing where this path will lead or maybe it inspires somebody to build something on their own to provide agency and privacy to people. It doesn't matter to me. I just want to be part of the conversation.\",\n      \"In service of this conversation, I am also launching the iDIG blog which will feature ideas and updates on the iDIG framework journey as well as The Resonant Builders Monthly which will be a monthly newsletter to feature recent blog posts but more importantly feature what other builders are up to in service of building a web more in tune with people being in control of their experiences.\",\n      \"I am also wrapping up a book on this journey titled We the Resonant Builders. Coming soon!\",\n      \"I argue what is possible when more people start to build for the health of the connection more than the wealth extracted from it. This is the conversation I want to start.\",\n      \"With iDIG, I personally want to explore new methodologies to surface opportunities for resonant alignment between people and information. I have been recently researching quantum social sciences theory and how this might help define what I call the iDIG attractor that is in development. I just think we are ready to evolve beyond traditional filtering for the way we discover information. I will be writing more about this in my next blog post!\",\n      \"Again, I really don't know what iDIG is. I almost don't want to define it. Maybe it's part hobby and part obsession. All I know is I have built the foundation of it and am ready to explore where it can go. More importantly what I might uncover from what other people are building that could help mold this into something more than what I can imagine and possibly inspire others to build what they have not imagined.\",\n      \"But the end goal is to build tools for people to harness their own potential and purpose, not in service of what is built but what resides within them. Tools to help people align resonantly with opportunities, resources for social services, news, or what interests them.\",\n      \"This tool is not special. People are or can be special. This tool is to illuminate this potential, not influence it.\"\n    ]\n  }\n};\n\nexport default function BlogPost() {\n  const params = useParams<{ id: string }>();\n  const [showShareOptions, setShowShareOptions] = useState(false);\n  const postId = params.id;\n  const post = postId ? blogPosts[postId] : null;\n\n  if (!post) {\n    return (\n      <div className=\"min-h-screen bg-white\">\n        <Navigation />\n        <main className=\"pt-20\">\n          <section className=\"py-20\">\n            <div className=\"max-w-4xl mx-auto px-6 text-center\">\n              <h1 className=\"text-4xl font-light mb-6\">Blog Post Not Found</h1>\n              <p className=\"text-gray-600 mb-8\">The blog post you're looking for doesn't exist.</p>\n              <Link href=\"/blog\" className=\"inline-flex items-center text-blue-500 hover:text-blue-600 transition-colors font-medium\">\n                Back to Blog\n                <svg className=\"w-4 h-4 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                </svg>\n              </Link>\n            </div>\n          </section>\n        </main>\n      </div>\n    );\n  }\n\n  const shareUrl = window.location.href;\n  const shareText = `Check out this blog post: ${post.title}`;\n\n  const handleShare = (platform: string) => {\n    const encodedUrl = encodeURIComponent(shareUrl);\n    const encodedText = encodeURIComponent(shareText);\n    \n    let shareLink = '';\n    switch (platform) {\n      case 'twitter':\n        shareLink = `https://twitter.com/intent/tweet?text=${encodedText}&url=${encodedUrl}`;\n        break;\n      case 'facebook':\n        shareLink = `https://www.facebook.com/sharer/sharer.php?u=${encodedUrl}`;\n        break;\n      case 'linkedin':\n        shareLink = `https://www.linkedin.com/sharing/share-offsite/?url=${encodedUrl}`;\n        break;\n      case 'copy':\n        navigator.clipboard.writeText(shareUrl);\n        setShowShareOptions(false);\n        return;\n    }\n    \n    if (shareLink) {\n      window.open(shareLink, '_blank', 'width=600,height=400');\n      setShowShareOptions(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navigation />\n      \n      <main className=\"pt-20\">\n        <section className=\"py-20\">\n          <div className=\"max-w-4xl mx-auto px-6\">\n            {/* Back to Blog Link */}\n            <div className=\"mb-8\">\n              <Link href=\"/blog\" className=\"inline-flex items-center text-blue-500 hover:text-blue-600 transition-colors font-medium\">\n                <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n                </svg>\n                Back to Blog\n              </Link>\n            </div>\n\n            {/* Blog Post Header */}\n            <div className=\"bg-white rounded-2xl px-12 pt-6 pb-12 shadow-lg border border-gray-200 mb-8\">\n              <div className=\"flex justify-between items-start mb-6\">\n                <div>\n                  <div className=\"mb-4\">\n                    <span className=\"text-sm text-blue-500 font-medium\">{post.category}</span>\n                    <span className=\"text-gray-400 mx-2\">•</span>\n                    <span className=\"text-sm text-gray-500\">{post.date}</span>\n                    <span className=\"text-gray-400 mx-2\">•</span>\n                    <span className=\"text-sm text-gray-500\">By {post.author}</span>\n                  </div>\n                  <h1 className=\"text-4xl md:text-5xl font-light mb-6\">\n                    {post.title.includes('iDIG') ? (\n                      post.title.split('iDIG').map((part, index) => (\n                        <span key={index}>\n                          {part}\n                          {index < post.title.split('iDIG').length - 1 && (\n                            <>i<em>DIG</em></>\n                          )}\n                        </span>\n                      ))\n                    ) : post.title}\n                  </h1>\n                </div>\n                \n                {/* Share Button */}\n                <div className=\"relative\">\n                  <button\n                    onClick={() => setShowShareOptions(!showShareOptions)}\n                    className=\"flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg hover:border-gray-400 transition-colors text-gray-600 hover:text-gray-700\"\n                    data-testid=\"button-share\"\n                  >\n                    <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z\" />\n                    </svg>\n                    Share\n                  </button>\n                  \n                  {/* Share Dropdown */}\n                  {showShareOptions && (\n                    <div className=\"absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-10\">\n                      <button\n                        onClick={() => handleShare('twitter')}\n                        className=\"w-full text-left px-4 py-2 hover:bg-gray-50 flex items-center gap-3\"\n                        data-testid=\"button-share-twitter\"\n                      >\n                        <svg className=\"w-4 h-4 text-blue-400\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path d=\"M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z\"/>\n                        </svg>\n                        Share on Twitter\n                      </button>\n                      <button\n                        onClick={() => handleShare('facebook')}\n                        className=\"w-full text-left px-4 py-2 hover:bg-gray-50 flex items-center gap-3\"\n                        data-testid=\"button-share-facebook\"\n                      >\n                        <svg className=\"w-4 h-4 text-blue-600\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n                        </svg>\n                        Share on Facebook\n                      </button>\n                      <button\n                        onClick={() => handleShare('linkedin')}\n                        className=\"w-full text-left px-4 py-2 hover:bg-gray-50 flex items-center gap-3\"\n                        data-testid=\"button-share-linkedin\"\n                      >\n                        <svg className=\"w-4 h-4 text-blue-700\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path d=\"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z\"/>\n                        </svg>\n                        Share on LinkedIn\n                      </button>\n                      <button\n                        onClick={() => handleShare('copy')}\n                        className=\"w-full text-left px-4 py-2 hover:bg-gray-50 flex items-center gap-3\"\n                        data-testid=\"button-share-copy\"\n                      >\n                        <svg className=\"w-4 h-4 text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z\" />\n                        </svg>\n                        Copy Link\n                      </button>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Demo Link */}\n              <div className=\"mb-8 text-center\">\n                <Link href=\"/#demo-section\" className=\"inline-flex items-center text-blue-500 hover:text-blue-600 transition-colors font-medium\">\n                  Watch the i<em>DIG</em> Demo\n                  <svg className=\"w-4 h-4 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                  </svg>\n                </Link>\n              </div>\n\n              {/* Blog Post Content */}\n              <div className=\"prose prose-lg max-w-none\">\n                {post.content.map((paragraph, index) => (\n                  <p key={index} className=\"text-gray-700 leading-relaxed mb-6\">\n                    {paragraph.includes('iDIG') ? (\n                      paragraph.split(/(\\biDIG\\b)/g).map((part, partIndex) => (\n                        part === 'iDIG' ? <span key={partIndex}>i<em>DIG</em></span> : part\n                      ))\n                    ) : paragraph}\n                  </p>\n                ))}\n              </div>\n\n              {/* Author Bio */}\n              <div className=\"mt-12 pt-8 border-t border-gray-200\">\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center\">\n                    <span className=\"text-xl font-medium text-blue-600\">PD</span>\n                  </div>\n                  <div>\n                    <h3 className=\"font-medium text-lg\">{post.author}</h3>\n                    <p className=\"text-gray-600 text-sm\">\n                      Creator of i<em>DIG</em> and advocate for resonant tool building. Exploring the intersection of human curiosity and technology.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-800 text-white py-8\">\n        <div className=\"max-w-6xl mx-auto px-6\">\n          <div className=\"text-center\">\n            <div className=\"text-xl font-medium mb-4 text-blue-400\">\n              iDIG.io\n            </div>\n            <p className=\"text-gray-400 text-sm\">\n              Resonant Tools for Curious Minds\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":16216},"client/src/pages/NewsletterIssue.tsx":{"content":"import Navigation from \"@/components/Navigation\";\nimport { Link } from \"wouter\";\n\nexport default function NewsletterIssue() {\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navigation />\n      \n      <main className=\"pt-10\">\n        <section className=\"pt-0 pb-8\">\n          <div className=\"max-w-4xl mx-auto px-6\">\n            \n            {/* Back Navigation */}\n            <div className=\"mb-6\">\n              <Link href=\"/newsletter\" className=\"inline-flex items-center text-blue-500 hover:text-blue-600 transition-colors\">\n                <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n                </svg>\n                Back to Newsletter\n              </Link>\n            </div>\n\n            {/* Newsletter Header */}\n            <div className=\"bg-white rounded-2xl px-12 pt-8 pb-12 shadow-lg border border-gray-200\">\n              <article className=\"prose prose-lg max-w-none\">\n                <div className=\"text-center mb-8\">\n                  <div className=\"mb-4\">\n                    <span className=\"text-sm text-blue-500 font-medium\">The Resonant Builders Monthly</span>\n                    <span className=\"text-gray-400 mx-2\">•</span>\n                    <span className=\"text-sm text-gray-500\">Issue #1</span>\n                    <span className=\"text-gray-400 mx-2\">•</span>\n                    <span className=\"text-sm text-gray-500\">September 2025</span>\n                  </div>\n                  <h1 className=\"text-4xl md:text-5xl font-light mb-6\">Resonant Builders Monthly</h1>\n                  <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n                    Exploring tools that amplify human curiosity and foster meaningful digital experiences.\n                  </p>\n                </div>\n\n                {/* Newsletter Content */}\n                <div className=\"text-gray-700 leading-relaxed space-y-6 text-left\">\n                  <h2 className=\"text-2xl font-medium mb-4\">A Letter from the Editor</h2>\n                  \n                  <p>Welcome to the inaugural issue of The Resonant Builders Monthly. I'm thrilled you've joined this community of builders who believe technology should serve human curiosity rather than exploit it.</p>\n                  \n                  <p>This newsletter exists because I believe we're at a critical moment in the evolution of digital tools. We can choose to build for engagement metrics and data extraction, or we can choose to build for human agency, privacy, and genuine value. This choice will define the next chapter of our digital lives.</p>\n                  \n                  <h2 className=\"text-2xl font-medium mb-4 mt-8\">What Makes a Tool \"Resonant\"?</h2>\n                  \n                  <p>A resonant tool is one that amplifies rather than replaces human capability. It respects user agency, protects privacy, and creates genuine value without manipulation. These tools don't seek to capture attention - they seek to enhance understanding.</p>\n                  \n                  <p>The i<em>DIG</em> framework embodies these principles by putting users in control of their information discovery process. Every interaction is designed to spark curiosity and provide context, not to maximize engagement time.</p>\n                  \n                  <h2 className=\"text-2xl font-medium mb-4 mt-8\">Community Spotlight</h2>\n                  \n                  <p>This month, we're highlighting builders who are creating tools with similar intentions. From privacy-first social platforms to educational tools that prioritize deep learning over quick consumption, our community is proving that another way is possible.</p>\n                  \n                  <p>If you're building something that aligns with these values, we'd love to feature your work. Reach out and share your story with the community.</p>\n                  \n                  <h2 className=\"text-2xl font-medium mb-4 mt-8\">Looking Ahead</h2>\n                  \n                  <p>Next month, we'll dive deeper into the technical philosophy behind resonant tool design, share implementation strategies, and feature more builders from our growing community.</p>\n                  \n                  <p>Until then, keep building with intention. The web needs more tools that serve human flourishing.</p>\n                  \n                  <div className=\"mt-8 pt-6 border-t border-gray-200 text-center\">\n                    <p className=\"text-gray-600 italic\">\n                      Paul Duplantis<br/>\n                      Founder, i<em>DIG</em>\n                    </p>\n                  </div>\n                </div>\n              </article>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-800 text-white py-8\">\n        <div className=\"max-w-6xl mx-auto px-6\">\n          <div className=\"text-center\">\n            <div className=\"text-xl font-medium mb-4 text-blue-400\">\n              i<em>DIG</em>.io\n            </div>\n            <p className=\"text-gray-400 text-sm\">\n              Resonant Tools for Curious Minds\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":5327}},"version":1}